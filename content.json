{"meta":{"title":"Wicksome Blog","subtitle":null,"description":null,"author":"Yeongjun Kim","url":"https://wicksome.github.io"},"pages":[{"title":"Hello World(and MD Test)","date":"2017-04-28T07:56:46.000Z","updated":"2017-04-28T07:58:28.000Z","comments":true,"path":"md-test/index.html","permalink":"https://wicksome.github.io/md-test/index.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！ Advertisement pica - high quality and fast imageresize in browser. babelfish - developer friendlyi18n with plurals support and easy syntax. You will like those projects! h1 Headingh2 Headingh3 Headingh4 Headingh5 Headingh6 HeadingHorizontal Rules Typographic replacementsEnable typographer option to see result. (c) (C) (r) (R) (tm) (TM) (p) (P) +- test.. test… test….. test?….. test!…. !!!!!! ???? ,, – — “Smartypants, double quotes” and ‘single quotes’ EmphasisThis is bold text This is bold text This is italic text This is italic text Strikethrough Blockquotes Blockquotes can also be nested… …by using additional greater-than signs right next to each other… …or with spaces between arrows. ListsUnordered Create a list by starting a line with +, -, or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers… …or keep all the numbers as 1. Start numbering with offset: foo bar CodeInline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code “fences” Sample text here... Syntax highlighting var foo = function (bar) &#123; return bar++;&#125;;console.log(foo(5)); Tables Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Linkslink text link with title Autoconverted link https://github.com/nodeca/pica (enable linkify to see) Images Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location: PluginsThe killer feature of markdown-it is very effective support ofsyntax plugins. see how to change output with twemoji. Subscript / Superscript 19th H2O \\++Inserted text++ FootnotesFootnote 1 link[1]. Footnote 2 link[3]. Duplicated footnote reference[4]. AbbreviationsThis is HTML abbreviation example. It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. *[HTML]: Hyper Text Markup Language Custom containers::: tip here be dragons test ::: 1.basic footnote content ↩3.paragraph ↩4.footnote content with some markdown ↩st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(document.getElementById(\"flowchart-0-options\").value); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"sequence-0-code\").value; var options = JSON.parse(document.getElementById(\"sequence-0-options\").value); var diagram = Diagram.parse(code); diagram.drawSVG(\"sequence-0\", options);"}],"posts":[{"title":"Factory Method Pattern","slug":"factory-method-pattern","date":"2017-04-26T04:32:16.000Z","updated":"2017-04-28T09:07:10.000Z","comments":true,"path":"2017/04/26/factory-method-pattern/","link":"","permalink":"https://wicksome.github.io/2017/04/26/factory-method-pattern/","excerpt":"[GOF{kr}:156] - 팩토리 메서드 GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015. 의도객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다. 구조 활용성 어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때 생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때 객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때","text":"[GOF{kr}:156] - 팩토리 메서드 GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015. 의도객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다. 구조 활용성 어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때 생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때 객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때 예제 방법 1) 추상 클래스 방법 2) 팩토리 메서드 매개변수화 - abstract factory pattern 방법 3) Lazy Initialization 기법 방법 4) 템플릿 활용 참고 예제예를 들어 다양한 종류의 문서를 표현하는 응용프로그램 프레임워크가 있다. 이를 위해서는 일단 두 개의 큰 추상화가 필요하다. 하나는 Creator(응용프로그램) 추상 클래스이고, 다른 하나는 Product(문서) 추상 클래스(혹은 인터페이스)이다.Creator 클래스는 문서의 인스턴스를 ++언제++ 만들지는 알지만, ++어떤 문서++를 만들어야 하는지는 알지 못한다. Product 클래스가 추상 클래스이기 때문에 인스턴스를 가질 수 없기 때문이다. abstract class Creator &#123; public Product newProduct() &#123; return createProduct(); &#125; public abstract Product createProduct(); // factory method&#125;interface Product &#123;&#125; 팩토리 메서드 패턴은 이런 문제에 대한 해법을 제시한다. Document의 서브클래스 중 어느 것을 생성해야 하는지에 대한 정보를 캡슐화하고, 그것을 프레임워크에서 떼어낸다. public class TextProduct implements Product &#123;&#125;public class PhotoProduct implements Product &#123;&#125; TextProduct 클래스와 PhotoProduct 클래스를 팩토리 메서드 패턴을 활용하여 생성한다면 아래와 같은 방법이 있다. 방법 1) 추상 클래스사용자는 특정 응용프로그램에 종속적인 구현을 위해서 두 클래스의 서브 클래스를 정의할 수 있다. Creator 클래스는 Product 객체를 관리하는 책임을 맡고 있으며, 필요에 따라 문서를 생성할 수도 있다. // factory pattern example with abstract classCreator textCreator = new TextCreator();Product p1 = textCreator.newProduct();Creator photoCreator = new PhotoCreator();Product p2 = photoCreator.newProduct(); public class TextCreator extends Creator &#123; @Override public Product createProduct() &#123; return new WordProduct(); &#125;&#125;public class PhotoCreator extends Creator &#123; @Override public Product createProduct() &#123; return new PhotoProduct(); &#125;&#125; public class TextProduct implements Product &#123;&#125;public class PhotoProduct implements Product &#123;&#125; 방법 2) 팩토리 메서드 매개변수화 - abstract factory pattern팩토리 메서드가 매개변수를 받아서 어떤 종류의 제품을 생성할지 만드는 방법도 있다. (추상 팩토리 패턴은 팩토리 메서드를 이용해서 구현할 때가 많다) // Factory pattern example using argumentProduct p1 = Creator1.create(ProductType.TEXT);Product p2 = Creator1.create(ProductType.PHOTO); public enum ProductType &#123; TEXT, PHOTO&#125; public class Creator &#123; static public Product create(ProductType type) &#123; switch (type) &#123; case TEXT: return new ExcelProduct(); case PHOTO: return new ImageProduct(); default: return null; &#125; &#125;&#125; 방법 3) Lazy Initialization 기법인스턴스화하는 접근자 메서드를 통해서만 인스턴스에 접근하는 방법으로, 생성자에서 아무 의미 없는 값으로 인스턴스에 대한 매개변수를 초기화하고, 접근자 메서드가 인스턴스를 반환하도록 할 수 있다. 생성자가 초기화 시키는 것이 아니라 필요한 시점에서 초기화를 수행하기 때문에 이런 기법을 Lazy Initialization이라고 한다. // factory pattern with lazy initializationTextCreator textCreator = new TextCreator();List collection = textCreator.newCollection(); public class TextCreator extends Creator &#123; @Override protected List createCollection() &#123; return new ArrayList&lt;TextProduct&gt;(); &#125;&#125; public abstract class Creator &#123; private List&lt;Product&gt; collection = null; public List newCollection() &#123; // lazy initialization if (collection == null) &#123; collection = createCollection(); &#125; return collection; &#125; // factory method abstract protected List createCollection();&#125; 방법 4) 템플릿 활용팩토리 메서드를 사용하면 생길 수 있는 문제점 중 하나는 Product 클래스 하나를 추가하려 할 때마다 Creator 클래스를 서브클래싱해야 한다는 점이다(방법 1). 이로써 클래스 계통의 부피가 확장되는 문제가 생길 수 있다. 이런 문제를 해결할 수 있는 방법 중 하나는 Creator 클래스를 상속받는 제네릭 클래스를 정의하고 Product 클래스로 매개변수화되도록 만드는 것이다. // factory pattern example whti templateStandardCreator&lt;WordProduct&gt; wordProductCreator = new StandardCreator&lt;&gt;(WordProduct.class);Product p1 = wordProductCreator.newProduct();StandardCreator&lt;ImageProduct&gt; imageProductCreator = new StandardCreator&lt;&gt;(ImageProduct.class);Product p2 = imageProductCreator.newProduct(); /** * Creator Template * @param &lt;T&gt; product type */public class StandardCreator&lt;T extends Product&gt; extends Creator &#123; private Class&lt;T&gt; cls; public StandardCreator(Class&lt;T&gt; cls) &#123; this.cls = cls; &#125; @Override public Product createProduct() &#123; T product = null; try &#123; product = cls.newInstance(); &#125; catch (InstantiationException | IllegalAccessException e) &#123; e.printStackTrace(); &#125; return product; &#125;&#125; 참고Factory Method라는 패턴 이름이 적절하지 못한데, 이름으로 인해 객체를 생성하는 메소드를 Factory method라 오해하는 개발자가 많이 있다(Allen Holub의 말을 인용.) 이런 생성 메소드가 모두 Factory method 패턴을 사용하는 것은 아니다. Template Method의 생성 패턴 버전으로 볼 수 있는데 Template Method를 알지 못한다면 그 패턴을 먼저 이해하는 것이 Factory Method를 이해하기 수월할 것이다. 위키백과팩토리 메서드 패턴 st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(document.getElementById(\"flowchart-0-options\").value); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"sequence-0-code\").value; var options = JSON.parse(document.getElementById(\"sequence-0-options\").value); var diagram = Diagram.parse(code); diagram.drawSVG(\"sequence-0\", options);","categories":[],"tags":[{"name":"design pattern, creational pattern, java","slug":"design-pattern-creational-pattern-java","permalink":"https://wicksome.github.io/tags/design-pattern-creational-pattern-java/"}]}]}