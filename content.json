{"meta":{"title":"Wicksome Blog","subtitle":null,"description":null,"author":"Yeongjun Kim","url":"https://wickso.me"},"pages":[{"title":"Hello World(and MD Test)","date":"2017-04-28T07:56:46.000Z","updated":"2017-05-02T13:30:34.000Z","comments":true,"path":"md-test/index.html","permalink":"https://wickso.me/md-test/index.html","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！ Advertisement pica - high quality and fast imageresize in browser. babelfish - developer friendlyi18n with plurals support and easy syntax. You will like those projects! h1 Headingh2 Headingh3 Headingh4 Headingh5 Headingh6 HeadingHorizontal Rules Typographic replacementsEnable typographer option to see result. (c) (C) (r) (R) (tm) (TM) (p) (P) +- test.. test… test….. test?….. test!…. !!!!!! ???? ,, – — “Smartypants, double quotes” and ‘single quotes’ EmphasisThis is bold text This is bold text This is italic text This is italic text Strikethrough Blockquotes Blockquotes can also be nested… …by using additional greater-than signs right next to each other… …or with spaces between arrows. ListsUnordered Create a list by starting a line with +, -, or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers… …or keep all the numbers as 1. Start numbering with offset: foo bar CodeInline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code “fences” Sample text here... Syntax highlighting var foo = function (bar) &#123; return bar++;&#125;;console.log(foo(5)); Tables Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Linkslink text link with title Autoconverted link https://github.com/nodeca/pica (enable linkify to see) Images Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location: PluginsThe killer feature of markdown-it is very effective support ofsyntax plugins. see how to change output with twemoji. Subscript / Superscript 19th H2O \\++Inserted text++ FootnotesFootnote 1 link[1]. Footnote 2 link[3]. Duplicated footnote reference[4]. AbbreviationsThis is HTML abbreviation example. It converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on. *[HTML]: Hyper Text Markup Language Custom containers::: tip here be dragons test ::: st=>start: Start|past:>http://www.google.com[blank] e=>end: End:>http://www.google.com op1=>operation: My Operation|past op2=>operation: Stuff|current sub1=>subroutine: My Subroutine|invalid cond=>condition: Yes or No?|approved:>http://www.google.com c2=>condition: Good idea|rejected io=>inputoutput: catch something...|request st->op1(right)->cond cond(yes, right)->c2 cond(no)->sub1(left)->op1 c2(yes)->io->e c2(no)->op2->e{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob–&gt;Alice: I am good thanks!{“theme”:”simple”,”scale”:1,”line-width”:2,”line-length”:50,”text-margin”:10,”font-size”:12} var code = document.getElementById(“sequence-0-code”).value; var options = JSON.parse(document.getElementById(“sequence-0-options”).value); var diagram = Diagram.parse(code); diagram.drawSVG(“sequence-0”, options);1.basic footnote content ↩3.paragraph ↩4.footnote content with some markdown ↩"}],"posts":[{"title":"이펙티브자바 8장. 일반적인 프로그래밍 원칙들 - 1","slug":"general-programming-1","date":"2017-09-16T01:00:00.000Z","updated":"2017-09-17T10:21:05.000Z","comments":true,"path":"2017/09/16/general-programming-1/","link":"","permalink":"https://wickso.me/2017/09/16/general-programming-1/","excerpt":"규칙 45 - 지역 변수의 유효범위를 최소화하라규칙 46 - for문보다는 for-each문을 사용하라규칙 47 - 어떤 라이브러리가 있는지 파악하고 적절히 활용하라","text":"규칙 45 - 지역 변수의 유효범위를 최소화하라규칙 46 - for문보다는 for-each문을 사용하라규칙 47 - 어떤 라이브러리가 있는지 파악하고 적절히 활용하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 45. 지역 변수의 유효범위를 최소화하라처음 사용하는 곳에서 선언하라 사용하기 전에(처음 사용하는 곳 말고 이전에) 선언하면 실제 사용될 때쯤 그 변수의 자료형과 초깃값이 무엇이었는지 잊어버린다 너무 빨리 선언하면 유효범위가 너무 커진다. 거의 모든 지역 변수 선언에는 초깃값(initalizer)이 표함되어야 한다 while문보다는 for문을 쓰는 것이 좋다. -&gt; 순환문 변수(loop variable)을 사용할 수 있기 때문 try-catch: 특정값이 catch에서 초기화해야 하는 경우와 같은 코드에서는 예외 유효범위를 최소화하는 숙어 for (int i = 0; n = expensiveComputation(); i &lt; n; i++&gt;) &#123; doSomthing(i);&#125; 두 개의 순환문 변수가 사용됨, i와 n의 유효범위는 정확히 for문으로 제한 expensiveComputation()의 비용이 크고, 매번 안에서 재계산할 필요가 없어짐 메서드의 크기를 줄이고 특정한 기능에 집중하라 두 가지 서로 다른 기능을 넣지 말자 각 기능을 나눠서 별도 메서드로 구현하자 i.e 지역 변수의 유효범위를 최소화하면 가독성(readability)과 유지보수성(maintainability)이 좋아지고, 오류 발생 가능성도 줄어든다. 46. for문보다는 for-each문을 사용하라// 컬렉션이나 배열을 순회할 때는 이 숙어를 따르자for (Element e : elements) &#123; doSomething(e);&#125; java 1.5부터 도입된 for-each문은 성가신 코드를 제거하고 반복자나 첨자 변수를 제거해서 오류 가능성을 없앤다 for-each에서 : 기호는 “in”이라고 읽는다 for문에 비해 명료하고 버그 발생 가능성도 적으며, 성능도 for문에 뒤지지 않는다. for-each의 장점은 여러 컬렉션에 중첩되는 순환문을 만들어야 할 때 더 빛이 난다. // 굉장히 간결하다for (Suit suit : suits) &#123; for (Rank rank : ranks) &#123; deck.add(new Card(suit, rank)); &#125;&#125; Iterable 인터페이스를 구현하면 for-each를 사용할 수 있다. public interface Iterable&lt;E&gt; &#123; // 이 Iterable 안에 있는 원소들에 대한 반복자 반환 Iteraor&lt;E&gt; iterator();&#125; for-each를 적용할 수 없는 경우 Filtering: 순회하다가 특정 원소를 삭제하기 위해 remove()를 호출해야하므로 Transforming: 원소 일부의 값을 변환하기 위해 리스트 반복자나 배열 첨자가 필요하므로 Parallel iteration: 병렬적으로 순회해야 하고 모든 반복자나 첨자 변수가 발맞춰 나아가도록 구현해야 한다면 반복자나 첨자 변수를 명시적으로 제어할 필요가 있을 것이므로 47. 어떤 라이브러리가 있는지 파악하고 적절히 활용하라 바퀴를 다시 발명하지 말라(Don’t reinvent the wheel) 표준 라이브러리를 사용하면, 일과 큰 관련성 없는 문제에 대한 해결 방법을 구현하는데 시간을 소비하지 않는다 별다른 노력을 하지 않아도 그 성능은 점차 개선된다 새로운 기능이 추가된다 팀원과 같은 코드를 사용하게 되기 때문에 가독성, 유지보수, 재사용성이 높아진다 표준 라이브러리를 사용하기 위해, 중요한 새 릴리즈가 나올 때마다 어떤 기능이 추가되었는지 알아두자 다 공부할 순 없지만 핵심 혹은 개발 관련 라이브러리는 알아두자(java.lang, java.util.*, java.util.collections, java.util.concurrent, …)","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 7장. 메서드 - 3","slug":"methods-3","date":"2017-08-13T01:00:00.000Z","updated":"2017-08-13T13:19:39.000Z","comments":true,"path":"2017/08/13/methods-3/","link":"","permalink":"https://wickso.me/2017/08/13/methods-3/","excerpt":"규칙 43 - null 대신 빈 배열이나 컬렉션을 반환하라규칙 44 - 모든 API 요소에 문서화 주석을 달라","text":"규칙 43 - null 대신 빈 배열이나 컬렉션을 반환하라규칙 44 - 모든 API 요소에 문서화 주석을 달라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 43. null 대신 빈 배열이나 컬렉션을 반환하라 Null References “I call it my billion-dollar mistake.” - Tony Hoare // as-isif (values != null &amp;&amp; Arrays.asList(values).contains(Value.IMAGE)) &#123;&#125;// to-beif (Arrays.asList(values).contains(Value.IMAGE)) &#123;&#125; 반환값이 null인 경우를 항상 대비해야한다. 빈 배열이나 컬렉션 대신 null을 반환하는 메서드는 구현하기도 더 까다롭다. 배열 할당 비용을 피할 수 있으니 null을 반환해야 한다? 프로파일링 결과로 해당 메서드가 성능 저하의 주범이라는 것이 밝혀지지 않는 한, 그런 수준까지 성능 걱정을 하는 것은 바람직하지 않다(규칙 55 - 신중하게 최적화하라). 모든 프로그래머가 알아둬야 하는 최적화 관련 격언 세 가지 “맹목적인 어리석음을 비롯한 다른 어떤 이유보다도, 효율성이라는 이름으로 저질러지는 죄악이 더 많다(효율성을 반드시 성취하는 것도 아니면서 말이다).”윌리엄 울프(William A. Wulf[Wulf72]) “작은 효율성(small efficiency)에 대해서는, 말하자면 97% 정도에 대해서는, 잊어버려라. 석부른 최적화(premature optimzation)은 모든 악의 근원이다.”도널드 커누스(Donald E. Knuth)[Kunth74] “최적화를 할 때는 아래의 두 규칙을 따르라.규칙 1: 하지마라.규칙 2: (전문가들만 따를 것) 아직은 하지 마라 - 완벽히 명료한, 최적화되지 않은 해답을 얻을 때까지는.”M. A. 잭슨(M. A. Jackson)[Jackson75] 길이가 0인 배열은 변경이 불가능하므로 아무 제약 없이 재사용할 수 있다(규칙 15). 컬렉션에서 배열을 만들어 반환하는 올바른 방법 private final List&lt;Cheese&gt; cheeseInStock = ...;private static final Cheese[] EMPTY_CHEESE_ARRAY = new Cheese[0];public Cheese[] getCheese() &#123; return cheeseInStock.toArray(EMPTY_CHEESE_ARRAY);&#125; 위 코드에서 toArray()에 전달되는 빈 매열 상수는 반환값의 자료형을 명시하는 구실을 한다. 보통 toArray()는 반환되는 원소가 담길 배열을 스스로 할당하는데, 컬렉션이 비어 있는 경우에는 인자로 주어진 빈 배열을 쓴다. 그리고 인자로 주어진 배열이 컬렉션의 모든 원소를 담을 정도로 큰 경우에는 해당 배열을 반환값으로 사용한다. 따라서 위의 숙어대로 하면 빈 배열은 절대로 자동 할당되지 않는다. ArrayList.java public &lt;T&gt; T[] toArray(T[] a) &#123; if (a.length &lt; size) // Make a new array of a's runtime type, but my contents: return (T[]) Arrays.copyOf(elementData, size, a.getClass()); System.arraycopy(elementData, 0, a, 0, size); if (a.length &gt; size) a[size] = null; return a;&#125; 컬렉션 복사본을 반환하는 올바른 방법 컬렉션을 반환하는 메서드도 빈 컬렉션을 반환해야 할 때마다 동일한 변경 불가능 빈 컬렉션 객체를 반환하도록 구현할 수 있다. Collections.emptySet(), Collections.emptyList(), Collections.emptyMap()가 그런 용도로 사용된다. public List&lt;Cheese&gt; getCheeseList() &#123; if (cheeseInSrock.isEmpty()) &#123; return Collections.emptyList(); // 언제나 같은 리스트 반환 &#125; else &#123; return new ArrayList&lt;Cheese&gt;(cheeseInStock); &#125;&#125; null 대신에 빈 배열이나 빈 컬렉션을 반환하자. null 값을 반환하는 것은 C 언어에서 전해진 관습으로, C에서는 배열의 길이가 배열과 따로 반환된다. 길이 0인 배열을 할당해서 반환하더라도 아무 이득이 없다. 규칙 44. 모든 API 요소에 문서화 주석을 달라 좋은 API 문서를 만들려면 API에 포함된 모든 클래스, 인터페이스, 생성자, 메서드, 그리고 필드 선언에 문서화 주석을 달아야 한다. 문서화 주석과 javadoc을 통해 API 문서를 자동으로 만들 수 있다. 문서화 주석 문법은 자바 언어의 일부는 아니지만, 모든 프로그래머가 알아야 하는 실질적인 표준 API다. (How to Write Doc Comments - Oracle 웹사이트) 공통List.java /** * Returns the hash code value for this list. The hash code of a list * is defined to be the result of the following calculation: * &lt;pre&gt;&#123;@code * int hashCode = 1; * for (E e : list) * hashCode = 31*hashCode + (e==null ? 0 : e.hashCode()); * &#125;&lt;/pre&gt; * This ensures that &lt;tt&gt;list1.equals(list2)&lt;/tt&gt; implies that * &lt;tt&gt;list1.hashCode()==list2.hashCode()&lt;/tt&gt; for any two lists, * &lt;tt&gt;list1&lt;/tt&gt; and &lt;tt&gt;list2&lt;/tt&gt;, as required by the general * contract of &#123;@link Object#hashCode&#125;. * * @return the hash code value for this list * @see Object#equals(Object) * @see #equals(Object) */int hashCode(); 코드는 {@code } 태그를 사용하라. 코드 서체로 표시되도록 한다. 태그 안에 포함된 모든 HTML 마크업이나 javadoc 태그가 위력을 발휘하지 못하도록 한다. 여러 줄로 나뉜 코드를 문서화 주석에 넣을 때는 {@code } 태그를 HTML &lt;pre&gt; 태그 안에 넣어라. &lt;tt&gt; 태그는 HTML5 에서 더이상 지원하지 않는다(고정폭을 보여줘야 할 경우에는 일반적으로 &lt;code&gt; 태그). \\ - MDN ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it. 주석을 달 때 명심해야 할 일반적 원칙은, 문서화 주석은 소스 코드로 보나 javadoc으로 변환한 결과물로 보나 읽을 만해야 한다는 것이다. 그럴수 없는 상황이라면, javadoc으로 변환한 결과물의 가독성을 우선시하기 바란다. /** * The triangle inequality is &#123;@literal |x + y| &lt; |x| + |y|&#125;. ... */ HTML 메타문자들을 사용할 때는 {@literal } 태그를 사용하라. &lt; 기호만 {@literal } 태그로 둘 수도 있었겠지만, 그랬으면 가독성이 떨어졌을 것이다. {@code } 태그와 유사하지만, 코드 서체로 표시되지 않는 차이가 있다. 모든 문서화 주석의 첫 번째 “문장”은 해당 주석에 담긴 내용을 요약한 것이다(summary description). 혼란을 막기 위해, 클래스나 인터페이스의 맴버나 생성자들 가운데 요약문 같은 것은 없어야 한다. 오버로딩할 경우에는 같은 요약을 쓰는 것이 자연스러울 때가 있으니 주의하라(하지만 문서화 주석의 경우, 동일한 첫 문장은 곤란하다). 요약문에 마침표가 여러 번 포함되어야 하는 경우에는 주의하라. javadoc은 뒤에 공백, 탭, 줄바꿈 문자(line terminator), 블록 태그(block tag)가 오는 첫번째 마침표 위치에서 요약문이 끝나는 것으로 생각한다. 이 문제를 푸는 가장 좋은 방법은, {@literal } 태그로 감싸는 것이다. example. /** * A college degree, such as B.S., M.S. or Ph.D. * College is a fountain of knowledge where many go to drink. */public class Degree &#123; ... &#125; /** * A college degree, such as B.S., &#123;@literal M.S.&#125; or Ph.D. * ... 엄밀히 따지자면 문서화 주석의 요약문은 첫 번째 “문장”일 필요는 없다. 완벽한 문장일 필요가 없다는 것이다. 메서드나 생성자의 경우, 요약문은 메서드가 무슨 일을 하는지 기술하는 (객체를 포함하는) 완전한 동사구(verb phrase)여야 한다. Collection.java - size() /** * Returns the number of elements in this collection. If this collection * contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;. * * @return the number of elements in this collection */int size(); ArrayList.java - Constructor /** * Constructs an empty list with the specified initial capacity. * * @param initialCapacity the initial capacity of the list * @throws IllegalArgumentException if the specified initial capacity * is negative */public ArrayList(int initialCapacity) &#123; ... &#125; 클래스와 인터페이스의 요약문은, 해당 클래스나 인터페이스로 만들어진 객체가 무엇을 나타내는지를 표현하는 명사구여야 한다. Collection.java /** * The root interface in the &lt;i&gt;collection hierarchy&lt;/i&gt;. A collection... */ public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123; ... &#125; 필드의 요약문은, 필드가 나타내는 것이 무엇인지를 설명하는 명사구여야 한다. Math.PI /** * The &#123;@code double&#125; value that is closer than any other to * &lt;i&gt;pi&lt;/i&gt;, the ratio of the circumference of a circle to its * diameter. */public static final double PI = 3.14159265358979323846; javadoc에는 메서드 주석을 “상속”하는 기능이 있다. 적용 가능한 문서화 주석 가운데 가장 근접한 것을 찾는다. 이때 상위 클래스보다는 인터페이스 쪽에 우선권이 주어진다. {@inheritDoc } 태그를 사용하면 상위 자료형에 있는 문서화 주석 가운데 일부를 상속할 수도 있다. ArrayList.java /*** (중간 생략)* @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;*/public E get(int index) &#123; ... &#125; List.java /** * (중간 생략) * @throws IndexOutOfBoundsException if the index is out of range * (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt&gt;) */E get(int index); API 관련 별도 문서가 있다면, 문서화 주석에 링크를 남긴다. 문서화 주석에 관해서, 마지막으로 한 가지 주의사항만 더 살펴보자. 모든 공개 API 요소에는 문서화 주석을 달 필요가 있지만, 항상 그 정도면 충분하지 않다. 관련된 클래스가 많아서 복잡한 API의 경우, API의 전반적인 구조를 설명하는 별도 문서(external document)가 필요한 경우가 많다. 그런 문서가 있다면, 관련 클래스나 패키지의 문서화 주석에는 해당 문서로 연결되는 링크가 있어야 한다. 메서드메서드에 대한 문서화 주석은, 메서드와 클라이언트 사이의 규약을 간명하게 설명해야 한다. 계승을 위해 설계된 메서드가 아니라면(규칙17) 메서드가 어떻게가 아닌 무엇을 하는지를 설명해야 한다. 해당 메서드의 모든 선행조건(precondition)과 후행조건(postcondition)을 나열해야 한다. 선행조건: 메서드를 호출하려면 반드시 참(true)이 되어야 하는 조건들 후행조건: 메서드 실행이 성공적으로 끝난 다음에 만족되어야 하는 조건들 보통 선행조건은 무결점 예외(unchecked exception)에 대한 @throw 태그를 통해 암묵적으로 기술한다. 관계된 인자의 @param 태그를 통해 명시할 수도 있다. 메서드는 부작용(side effect)에 대해서도 문서화 해야 한다. 부작용은 후행조건을 만족하기 위해 필요한 것이 아닌, 시스템의 관측 가능한 상태 변화를 일컫는다. 규칙 70에 설명한 대로, 클래스가 메서드의 스레드 안전성(thread safety)에 대해서도 문서에 남겨야 한다. 메서드의 규약(contract)을 완벽하게 기술하려면, 문서화 주석에는 인자마다 @param 태그를 달아야 하고, 반환값 자료형이 void 가 아니라면 @return 태그도 달아야 하고, 무점검/점검 여부에 상관없이 모든 예외에는 @throws 태그도 붙어야 한다(규칙 62). 관습적으로, List.java /** * Removes the element at the specified position in this list (optional * operation). Shifts any subsequent elements to the left (subtracts one * from their indices). Returns the element that was removed from the * list. * * @param index the index of the element to be removed * @return the element previously at the specified position * @throws UnsupportedOperationException if the &lt;tt&gt;remove&lt;/tt&gt; operation * is not supported by this list * @throws IndexOutOfBoundsException if the index is out of range * (&lt;tt&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/tt&gt;) */E remove(int index); @param 태그나 @return 태그 다음에는 인자나 반환값을 설명하는 명사구(noun phrase)가 와야 한다. @throw 태그 다음에는 어떤 조건에서 예외가 발생하는지를 설명하는 if 절이 온다. 명사구 대신 산술 표현식(arithmetic expression)이 쓰일 때도 있다. @param, @return, @throws 태그 다음에 오는 구나 절에는 마침표를 찍지 않는다. 클래스클래스가 스레드에 안전하건 그렇지 않건 간에, 그 안전성 수준을 문서로 남겨야 한다(규칙 70). 직렬화(serialization)가 가능한 클래스라면 직렬화 형식도 밝혀야 한다(규칙 75). 제네릭 자료형이나 메서드에 주석을 달 때는 모든 자료형 인자들을 설명해야 한다. Map.java /** * An object that maps keys to values. A map cannot contain duplicate keys; * each key can map to at most one value. * * (중간 생략) * * @param &lt;K&gt; the type of keys maintained by this map * @param &lt;V&gt; the type of mapped values */public interface Map&lt;K,V&gt; &#123; ... &#125; enum 자료형에 주석을 달 때는 자료형이나 public 메서드뿐 아니라 상수 각각에도 주석을 달아 주어야 한다. /** * 조직 연동에 사용되는 서비스. * 어드민에서 조직연동 API와 같이 내려오는 값도 포함(SSO, IPT) * @author yeongjun on 2016. 11. 2. */public enum OrgSyncType &#123; /** 조직/구성원의 조직 */ GROUP, /** 조직/구성원의 구성원 */ MEMBER, /** 직급/직책 */ JOB&#125; 어노테이션 자료형에 주석을 달 때는 자료형뿐 아니라 모든 멤버에도 주석을 달아야 한다. 멤버에는 필드인 것처럼 명사구 주석을 달아라. 자료형 요약문에는 동사구를 써서, 언제 이 자료형을 어노테이션으로 붙여야 하는지 설명하라. /** * 조직연동시 접근제한이 필요한 API라는 것을 명시. * * @author yeongjun on 2016. 11. 2. */@Retention(RetentionPolicy.RUNTIME)@Target(&#123;java.lang.annotation.ElementType.METHOD&#125;)public @interface OrgSyncUsersDenied &#123; /** * 어노테이션 붙은 메서드가 제한되어야 하는 조직연동 서비스 타입. */ OrgSyncType[] value();&#125; 릴리즈 1.5부터는 패키지 수준 문서화 주석(package-level doc comment)은 package-info.java에 두어야 한다. 패키지 선언 및 패키지 어노테이션을 넣을 수 있다. 참고 Swagger: API Document을 만들어 주는 툴","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 6장. 열거형과 어노테이션 - 1","slug":"enums-and-annotations-1","date":"2017-08-05T01:00:00.000Z","updated":"2017-09-17T11:16:26.000Z","comments":true,"path":"2017/08/05/enums-and-annotations-1/","link":"","permalink":"https://wickso.me/2017/08/05/enums-and-annotations-1/","excerpt":"규칙 30 - int 상수 대신 enum을 사용하라규칙 31 - ordinal 대신 객체 필드를 사용하라규칙 32 - 비트 필드(bit field) 대신 EnumSet을 사용하라규칙 33 - ordinal을 배열 첨자로 사용하는 대신 EnumMap을 이용하라규칙 34 - 확장 가능한 enum을 만들어야 한다면 인터페이스를 이용하라","text":"규칙 30 - int 상수 대신 enum을 사용하라규칙 31 - ordinal 대신 객체 필드를 사용하라규칙 32 - 비트 필드(bit field) 대신 EnumSet을 사용하라규칙 33 - ordinal을 배열 첨자로 사용하는 대신 EnumMap을 이용하라규칙 34 - 확장 가능한 enum을 만들어야 한다면 인터페이스를 이용하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 30. int 상수 대신 enum을 사용하라public static final int APPLE_FUJI = 0;public static final int APPLE_PIPPIN = 1; 예전처럼 int/String enum 패턴을 사용하면, 상수의 값이 바뀌면 클라이언트도 다시 컴파일 해야한다 디버깅이 어렵다(문자열로 변환해야하는 번거로움) enum 자료형public enum Apple &#123; FUJI, PIPPIN &#125; 자료형의 개체 수는 엄격히 통제된다(규칙 1) 싱글턴 패턴을 일반화한 것이다(규칙 3) 형안정 enum 패턴(typesafe enum pattern)을 자바 문법에 포함시킨 것이다(규칙 21) 임의의 메서드나 필드도 추가할 수 있다 임의의 인터페이스를 구현할 수 있다 Object에 정의된 모든 헤서드들이 포함되어 있다(3장 내용 전부) Comparable 인터페이스와(규칙 12) Serializable 인터페이스(11장)가 구현되어 있다 직렬화 형식은 enum 자료형상의 변화 대부분을 견딜 수 있도록 설계되어 있다 문자열로 쉽게 변환할 수 있다 enum 자료형은 상수 묶음에서 출발해서 점차로 완전한 기능을 갖춘 추상화 단위로 진화해 나갈 수 있다 enum은 원래 변경 불가능하므로 모든 필드는 final로 선언되어야 한다(규칙 15) 필드는 private로 선언하고 public 접근자를 두는 편이 더 낫다(규칙 14) 특정한 클래스에서만 쓰인다면 해당 클래스의 맴버클래스로 선언하라(규칙 22) 외부(external) enum 자료형 상수별로 달리 동작하는 코드를 만들어야 할 때는 enum 상수에 switch문을 적용하면 좋다 일반적으로 enum은 int 상수와 성능면에서 비등하다 고정된 상수 집합이 필요할 때 enum을 사용하라 활용 상수별 클래스 몸체안에 메서드 재정의: 상수별 메서드 구현(constant-specific method impelementation) 전략 enum(strategy enum) 규칙 31. ordinal 대신 객체 필드를 사용하라 모든 enum에는 ordinal()이 있음. ordinal()은 자료형 안에서 enum상수의 위치를 나타내는 정수값을 반환하는 메서드. as-ispublic enum Medal &#123; GOLD, SILVER, BRONZE; public int getRank() &#123; return ordinal() + 1; &#125;&#125; 상수로 사용할 값은 ordinal()를 사용하지 말고, 객체 필드(instance field)에 저장하라. to-bepublic enum Medal &#123; GOLD(1), SILVER(2), BRONZE(3); private final int rank; Medal(int rank) &#123; this.rank = rank; &#125; public int getRank() &#123; return rank; &#125;&#125; // lombok@AllArgsConstructorpublic enum Medal &#123; GOLD(1), SILVER(2), BRONZE(3); @Getter private final int rank;&#125; 자바의 Enum 관련 명세에 ordinal()에 대해 이렇게 설명되어 있다. 대부분의 프로프래머는 이 메서드를 사용할 일이 없을 것이다. EnumSet이나 EnumMap처럼 일반적인 용도의 enum 기반 자료 구조에서 사용할 목적으로 설계한 메서드다. 규칙 32. 비트 필드(bit field) 대신 EnumSet을 사용하라as-ispublic class Text &#123; public static final int BOLD = 1 &lt;&lt; 0; // 0001 public static final int ITALIC = 1 &lt;&lt; 1; // 0010 public static final int UNDERLINE = 1 &lt;&lt; 2; // 0100 public static final int STRIKETHROUGH = 1 &lt;&lt; 3; // 1000 public void applyStyles(int style) &#123; ... &#125;&#125; text.applyStyles(Text.BOLD | Text.ITALIC); 장점 비트 필드로 나타내면 비트 단위 산술 연산을 통해 집합 연산을 효율적으로 실행할 수 있다. 단점 int enum 패턴과 똑같은 단점(규칙 30) 비트 필드를 출력한 결과는 int enum 상수를 출력한 결과보다 이해하기 어려움 비트 필드에 포함된 모든 요소를 순차적으로 살펴보기도 어려움 to-beEnumSet을 사용하자. public class Text &#123; public enum Style &#123; BOLD, ITALIC, UNDERLINE, STRIKETHROUGH &#125; // 어느 Set 객체도 인자로 전달할 수 있으나, EnumSet이 분명 최선 public void applyStyles(Set&lt;Style&gt; styles) &#123; ... &#125;&#125; text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC)); 장점 Set 인터페이스를 구현하기 때문에 Set의 기능 제공 형 안전성, 다른 Set 구현들과 같은 수준의 상호운용성(interoperability) 제공 내부적으로 bit vector 사용 enum 갯수가 64 이하인 경우 EnumSet은 long 값 하나만 사용. 그러므로, 비트 필드에 필적하는 성능이 나옴. removeAll()이나 retainAll() 같은 일괄 연산도 비트 단위 산술 연산을 통해 구현 특징 인자가 Set을 받도록 선언 인자의 자료형으로는 클래스보다 인터페이스가 좋다(규칙 52) &gt; 다형성 클래스를 사용하면 특정한 구현에 종속 인터페이스를 자료형으로 쓰는 습관을 들이면 프로그램은 더욱 유연해짐 적당한 인터페이스가 없는 경우에는 객체를 클래스로 참조하는 것이 당연 단점 자바 1.6에서는 immutable EnumSet 객체를 만들 수 없음 Collections.unmodifiableSet으로 포장하거나, Guava 라이브러리(Google) 사용 규칙 33. ordinal을 배열 첨자로 사용하는 대신 EnumMap을 이용하라as-is Herb[] garden = ...;Set&lt;Herb&gt;[] herbsByType = (Set&lt;Herb&gt;[]) new Set[Herb.Type.values().length];// 배열 초기화for (int i = 0; i &lt; herbsByType.length; i++) &#123; herbsByType[i] = new HashSet&lt;Herb&gt;();&#125;for (Herb h : garden) &#123; herbsByType[h.type.ordinal()].add(h);&#125;for (int i = 0; i &lt; herbsByType.length; i++) &#123; System.out.println(Herb.Type.values()[i] + \": \" + herbsByType[i];&#125; ordinal()를 그냥 왠만하면 사용하지 말자. to-be Map&lt;Herb.Type, Set&lt;Herb&gt;&gt; herbsByType = new EnumMap&lt;Herb.Type, Set&lt;Herb&gt;&gt;(Herb.Type.class);// 배열 초기화for (Herb.Type t : Herb.Type.values()) &#123; herbsByType.pyt(t, new HashSet&lt;Herb&gt;());&#125;for (Herb h : garden) &#123; herbsByType.get(h.type).add(h);&#125;System.out.println(herbsByType); 속도면에서도 별 차이 없음 EnumMap 생성자는 키워 자료형을 나타내는 Class 객체를 인자로 받음 이런 Class 객체를 한정적 자료형 토큰(bounded type token)이라 부르는데, 실행시점 제네릭 자료형 정보를 제공한다(규칙 29). ordinal() 값을 배열 인덱스로 사용하지 말고, EnumMap을 쓰자 규칙 34. 확장 가능한 enum을 만들어야 한다면 인터페이스를 이용하라 계승 가능 enum 자료형은 만들 수 없지만, 인퍼테이스를 만들고 그 인터페이스를 구현하는 기본 enum 자료형을 만들면 흉내낼 수 있다. 많은 부분이 까다로워지지만, 연산 코드(opcode)를 만들어야 할 때 사용하기 좋다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 5장. 제네릭 - 2","slug":"generics-2","date":"2017-06-14T01:00:00.000Z","updated":"2017-06-28T02:27:38.000Z","comments":true,"path":"2017/06/14/generics-2/","link":"","permalink":"https://wickso.me/2017/06/14/generics-2/","excerpt":"규칙 26 - 가능하면 제네릭 자료형으로 만들 것규칙 27 - 가능하면 제네릭 메서드로 만들 것규칙 28 - 한정적 와일드카드를 써서 API 유연성을 높여라규칙 29 - 형 안전 다형성 컨테이너를 쓰면 어떨지 따져보라","text":"규칙 26 - 가능하면 제네릭 자료형으로 만들 것규칙 27 - 가능하면 제네릭 메서드로 만들 것규칙 28 - 한정적 와일드카드를 써서 API 유연성을 높여라규칙 29 - 형 안전 다형성 컨테이너를 쓰면 어떨지 따져보라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 26. 가능하면 제네릭 자료형으로 만들 것제네릭화gernerification 선언부에 type parameter 추가, 관습적으로 자료형을 나타내는 이름 E(규칙 56) 배열을 사용하는 제네릭 자료형에서 발생하는 오류를 피하는 방법 실체화 불가능 자료형으로는 배열을 생성할 수 없다(규칙 25). Stack.java:8 generic array creation elements = new E[DEFAULT_INITIAL_CAPACITY]; Object 배열을 만들어서 제네릭 배열 자료형으로 형변환(cast) Stack.java:8: warning: [unchecked] unchecked castfound : Object[], required: E[] elements = (E[]) new Object[DEFAULT_INITIAL_CAPACITY]; cast를 활용하면 컴파일 오류대신 경고가 발생한다. 문법적으로 문제는 없지만, 일반적으로 형 안전성을 보장하는 방법이 아니다. 하지만 해당 형변환이 프로그램의 형 안전성을 해치지 않는다면 무점검 형변환(unchecked cast)을 한다. 무점검 형전황이 안전함을 증명했다면, 경고를 억제하되 범위는 최소한으로 줄여야 한다(규칙 24). elements의 자료형을 E[]에서 Object[]로 바꾸는 것이다. 사용하는 곳마다 Object를 E로 cast 해준다. 제네릭 배열 생성 오류를 피하는 방법중 어떤 것을 쓸지는 취향 문제다. 배열을 사용하는 코드가 클래스 이곳저곳에 흩어져 있다면 첫번째 방법으로는 한번만 형변환하면 되지만, 두 번째는 여기저기서 형변환해야 한다. 그래서 첫 번째 방법이 좀 더 보편적으로 쓰인다[Naftalin07, 6.7] 기타 형인자 자료형에 primitive type은 사용할 수 없다. 자바 제네릭 자료형 시스템의 근본적 한계 때문이다. 이런 제약을 피하려면 개체화된 기본 자료형(boxed primitive type)을 사용하면 된다(규칙 49). 시간 있을 때마다 기존 자료형을 제네릭 자료형으로 변환하라. 기존 클라이언트 코드를 깨지 않ㄷ고도 새로운 사용자에게 더 좋은 API를 제공할 수 있게 될 것이다(규칙 23). 형인자를 제한하는 자료형: 아래 코드에서 E를 한정적 형인자(bounded type parameter)라 한다. &lt;E extends String&gt; 27. 가능하면 제네릭 메서드로 만들 것 형인자를 선언하는 type parameter list는 메서드의 수정자(modifier)와 반환값 자료형 사이에 둔다. public static &lt;E&gt; Set&lt;E&gt; union(Set&lt;E&gt; s1, Set&lt;E&gt; s2) &#123; Set&lt;E&gt; result = new HashSet&lt;E&gt;(s1); result.addAll(s2); return result;&#125; 제네릭 메서드를 호출할 때는 형인자는 전달할 필요가 없다. 컴파일러가 메서드에 전해진 인자의 자료형을 보고 형인자의 값을 알아낸다. 이 과정을 자료형 유추(type inference)라 한다. Generic Singleton pattern변경이 불가능하지만 많은 자료형에 적용 가능한 객체를 만들어야 할 때 사용. 제네릭은 자료형 삭제(erasure) 과정을 통해 구현되므로(규칙 25) 모든 필요한 형인자화(type parameterization) 과정에 동일 객체를 활용할 수 있는데, 그러려면 우선 필요한 형인자화 과정마다 같은 객체를 나눠주는 정적 팩터리 메서드를 자성해야 한다. 이 패턴은 Collections.reverseOrder 같은 함수 객체(규칙 23) 구현에 가장 널리 사용되지만, Collections.emptySet과 같은 컬렉션에도 쓰인다. public interface UnaryFunction&lt;T&gt; &#123; T apply(T arg);&#125; 항등함수: 받은것 그대로 반환하는 함수제네릭 정적 팰터리 메서드를 사용하면 중복되는 형인자를 제거하여 간결한 코드를 만들 수 있다. // 제네릭 싱글턴 팩터리 패턴private static UnaryFunction&lt;Object&gt; IDENTIFY_FUNCTION = new UnaryFunction&lt;Object&gt;() &#123; public Object apply(Object arg) &#123; return arg; &#125;&#125;// IDENTIFY_FUNCTION은 무상태 객체고 형인자는 비한정 인자이므로(unbounded)// 모든 자료형이 같은 객체를 공유해도 안전하다.@SuppressWarnings(\"unchecked\")public static &lt;T&gt; UnaryFunction&lt;T&gt; identityFunction() &#123; return (UnaryFunction&lt;T&gt;) IDENTIFY_FUNCTION;&#125; Recursive type bound&lt;T extends Comarable&lt;T&gt;&gt; 위 코드처럼 Type parameter의 범위에 자기자신이 포험된 표현으로, 그 범위가 선언되는 것을 말한다. 28. 한정적 와일드카드를 써서 API 유연성을 높여라요약 Comparable과 Comparator는 소비자이다. 유연성을 최대화하려면, 객체 생산자producer나 소비자consumer 구실을 하는 메서드 인자의 자료형은 와일드 카드 자료형으로 해라. PECS (Produce - Extends, Consumer - Super) 클래스 사용자가 와일드카드 자료형에 대해 고민하게 된다면, 그것은 아마도 클래스 API가 잘못 설계된 탓을 것이다. 에러가 발생하는 코드 Stack&lt;Number&gt; numberStack = new Stack&lt;&gt;();Iterable&lt;Integer&gt; integers = ...;numberStack.pushAll(integers); // throw exception 해결방안 public void pushAll(Iterable&lt;? extends E&gt; src) &#123; for (E e : src) &#123; push(e); &#125;&#125;public void popAll(Collection&lt;? super E&gt; dst) &#123; while (!isEmpty()) &#123; dst.add(pop()); &#125;&#125; 모든 자료형은 자기 자신의 하위 자료형이다. 모든 자료형 E는 자기 자신의 상위 자료형이다([JLS, 4.10]). 이원성(duality) // swap메서드를 선언하는 두 가지 방법public static &lt;E&gt; void swap(List&lt;E&gt; list, int i, int j);public static void swap(List&lt;?&gt; list, int i, int j); 간단한 두번째 방법이 더 바람직하다. List&lt;?&gt;에는 null 이외의 어떤 값도 넣을 수 없다. public static void swap(List&lt;?&gt; list, int i, int j) &#123; swapHelper(list, i, j);&#125;// 와일드카드 자료형을 포착하기 위한 private helper 메서드private static &lt;E&gt; void swapHelper(List&lt;E&gt; list, int i, int j) &#123; list.set(i, list.set(j, list.get(i)));&#125; 29. 형 안전 다형성 컨테이너를 쓰면 어떨지 따져보라// 형 안전 다형성(heterogeneous) 컨테이너 패턴 - APIpublic class Favorites &#123; public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance); public &lt;T&gt; T getFavority(Class&lt;T&gt; type);&#125; 보통 형인자는 각 키/값에 대해서 하나씩 필요하다. 하지만 Class 객체로 좀 더 유연하게 사용할 수 있다. 그런 class 리터럴을 자료형 토큰(type token)이라 부른다[Bracha04]. Favorites 객체는 형 안전성을 보장한다. 또한 다형성(heterogeneous)을 갖고 있다. 일반적인 맵과 달리, 모든 키의 자료형이 서로 다르다. 따라서 이러한 클래스를 형 안전 다형성 컨테이너(typesafe heterogeneous container)라 부른다. // 형 안전 다형성(heterogeneous) 컨테이너 패턴 - 구현public class Favorites &#123; private Map&lt;Class&lt;?&gt;, Object&gt; favorites = new HashMap&lt;&gt;(); public &lt;T&gt; void putFavorite(Class&lt;T&gt; type, T instance) &#123; if (type == null) throw new NullPointerException(\"Type is null\"); favorites.put(type, type.cast(instance)); // 값에 동적형변환을 하는 이유: 형 안전성 확보 &#125; public &lt;T&gt; T getFavority(Class&lt;T&gt; type) &#123; return type.cast(favorites.get(type)); &#125;&#125; Favorites 객체는 내부적으로 private Map&lt;Class&lt;?&gt;, Object&gt; 형의 favorites 필드를 이용한다. 그런데 비한정적 와일드카드 자료형을 사용했으니 이 맵에는 아무것도 넣을 수 없을 것 같지만, 와일드카드 자료형이 쓰인 곳은 맵이 아니라 키다. 다형성이 드러나는 곳이 이곳이다. favorites 맵의 값 자료형이 Object인데, 키와 값 사이의 자료형이 일치되는 것을 보장하지 않는다. 하지만 실제로는 자료형이 같다는 것을 알고 있으므로, 저장된 객체를 꺼낼 때 그 사실을 이용할 수 있다. -&gt; 동적 형변환(dynamic cast) Favorites 클래스의 단점으로 실체화 불가능 자료형(non-reifiable type)에는 쓰일 수 없다(규칙 25). 따라서 String이나 String[]은 저장할 수 있으나 List&lt;String&gt;은 저장할 수 없다. 이유는 List&lt;String&gt;의 Class 객체를 얻을 수 없기 때문이다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 5장. 제네릭 - 1","slug":"generics-1","date":"2017-05-21T01:00:00.000Z","updated":"2017-08-05T08:26:52.000Z","comments":true,"path":"2017/05/21/generics-1/","link":"","permalink":"https://wickso.me/2017/05/21/generics-1/","excerpt":"규칙 23 - 새 코드에는 무인자 제네릭 자료형을 사용하지 마라규칙 24 - 무점검 경고(unchecked warning)를 제거하라규칙 25 - 배열 대신 리스트를 써라","text":"규칙 23 - 새 코드에는 무인자 제네릭 자료형을 사용하지 마라규칙 24 - 무점검 경고(unchecked warning)를 제거하라규칙 25 - 배열 대신 리스트를 써라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 제네릭 관련 규칙 목록 용어 예 규칙 형인자 자료형parameterized type List&lt;String&gt; 23 실 형인자actual type parameter String 23 제네릭 자료형generic type List&lt;E&gt; 23, 26 형식 형인자formal type parameter E 23 비한정적 와일드 카드 자료형unbounded wildcard type List&lt;?&gt; 23 무인자 자료형row type List 23 한정적 형인자bounded type parameter &lt;E extends Number&gt; 276 재귀적 형 한정recursive type bound &lt;T extends Comparable&lt;T&gt;&gt; 27 한정적 와일드카드 자료형bounded wildcard type List&lt;? extends Number&gt; 28 제네릭 메서드generic method static &lt;E&gt; List&lt;E&gt; asList(E[] a) 27 자료형 토큰type token String.class 29 23. 새 코드에는 무인자 제네릭 자료형을 사용하지 마라 Java 1.5부터 사용 제네릭generic 클래스/인터페이스 = 제네릭 자료형generic typepublic interface List&lt;E&gt; &#123;&#125; 선언부에 형인자type parameter가 포함된 클래스나 인터페이스를 말한다[JLS, 8.1.2, 9.1.2]. “E의 리스트”라고 읽는다. 형인자 자료형parameterized typeprivate final List&lt;String&gt; stringList = ...; 각 제네릭 자료형은 형인자 자료형 집합을 정의한다. 이 집합은 이름 뒤에 &lt; 와 &gt; 기호로 감싼 실 형인자 목록이 붙은 클래스나 인터페이스 들로 구성되는데, 이 실 인자들은 제네릭 자료형의 형식 형인자 각각에 대응된다[JLS, 4.4, 4.5]. 컴파일 할 때 어떤 경고도 뜨지 않아야(또는, suppressing 경고가 없어야 - 규칙 24 참조) 한다. 무인자 자료형raw typeprivate final List stringList = ...; 무인자 자료형은 실 형인자 없이 사용되는 제네릭 자료형이다[JLS, 4.8]. 위 코드에서 List가 무인자 자료형(stringList는 String 객체만 보관되는데 형인자 자료형을 정의하지 않음) List vs List&lt;Object&gt; List: 형 검사 절차를 완전히 생략 List&lt;Object&gt;: 아무 객체나 넣을 수 있다는 것을 컴파일에게 알림 이렇게 사용하지 말자(엉뚱한 자료형의 객체를 넣어도 컴파일 시에는 문제가 없다). 무인자 자료형을 쓰면 형 안전성이 사라지고, 제네릭의 장점 중 하나인 표현력expreesiveness 측면에서 손해를 보게 된다. 이전 호환성migration compatibility으로 알려지니 이 요구사항 때문에 무인자 자료형을 지원할 뿐 비한정적 와일드카드 자료형unbounded wildcard typestatic int numElementsInCommon(Set&lt;?&gt; s1, Set&lt;?&gt; s2) &#123; int result = 0; for (Object o1: s1) if (s2.contains(o1)) result++; return result;&#125; 제네릭 자료형을 쓰고 싶으나 실제 형 인자가 무엇인지 모르거나 신경 쓰고 싶지 않을 때 ‘?’ 사용 그러나, Collection&lt;?&gt;에는 null 이외의 어떤 원소도 넣을 수 없다 (옮긴이) 어떤 자료형의 객체를 담는 컬렉션인지 알 방법이 없기 때문이다. TODO: 자세한 내용 확인해볼 것 예외제네릭 자료형 정보가 프로그램이 실행될 때는 지워지기 때문에(타입소거type erasure) 생긴 예외들(규칙 25) 클래스 리터럴class literal에는 반드시 무인자 자료형을 사용해야 한다. // 가능List.classString[].class // 배열 자료형 가능int.class // 기본 자료형 가능// 불가능List&lt;String&gt;.classList&lt;?&gt;.class 자바 표준에 따르면, 클래스 리터럴에는 형인자 자료형을 쓸 수 없다[JLS, 15.8.2]. 제네릭 자료형에 instanceof 연산자를 적용할 때는 다음과 같이 하는 것이 좋다. if (o instanceof Set) &#123; // 무인자 자료형 Set&lt;?&gt; m = (Set&lt;?&gt;) o; // 와일드카드 자료형&#125; 실행시 타입소거되기 때문에, instanceof 연산자를 비한정적 와일드 카드 자료형이 이외의 형인자 자료형에 적용할 수 없다. 무인자 자료형 대신 비한정적 와일드카드 자료형을 쓴다고 해서 instanceof 연산자가 다르게 동작하는 것은 아니다. 따라서 &lt;?&gt;를 붙혀봐야 코드만 지저분해질 뿐이다. 24. 무점검 경고(unchecked warning)를 제거하라 무점검 경고unchecked warning는 중요하다. 무시하지 마라. 모든 무점검 경고는 가능하다면 없애야 한다. 전부 없애고 나면 코드의 형 안전서이 보장되는 것 실행 도중 ClassCastException이 발생하지 않을 것 제거할 수 없는 경고 메시지는 형 안전성이 확실할 때만 @SupressWarnings(“unchecked”) 어노테이션을 사용해 억제한다 SupressWarnings 어노테이션은 가능한 작은 범위에 적용하라. SupressWarnings 어노테이션은 return 문에는 붙일 수 없는데, 선언문이 아니기 떄문이다[JLS, 9.7]. @SupressWarnings(“unchecked”) 어노테이션을 사용할 때마다, 왜 형 안정성을 위반하지 않는지 밝히는 주석을 반드시 붙여라 25. 배열 대신 리스트를 써라배열 vs 제네릭 자료형 배열은 공변 자료형covariant: class Sub extends Super {}일 때, Sub[]도 Super[]의 하위 자료형이다. 제네릭은 불변 자료형invariant: List&lt;Sub&gt;은 List&lt;Super&gt;의 하위 자료형이 될 수 없다. 아래 코드와 같이, 배열의 경우에는 문법적으로는 문제가 없어 실행중에 예외가 발생하고, 제네릭은 컴파일이 되지 않는다. 즉, 제네릭보다 배열이 취약하다(컴파일시에 문제를 발견하는 편이 더 낫다). // 실행중에 예외 발생Object[] objectArray = new Long[1];objectArray[0] = \"I dont's fit in\"; // ArrayStoreException 발생// 컴파일 되지 않는 코드List&lt;Object&gt; ol = new ArrayList&lt;Long&gt;(); // 자료형 불일치ol.add(\"I don't fit in\"); 배열은 실체화reification 되는 자료형이다[JLS, 4.7]. 즉, 배열의 각 원소의 자료형은 실행시간에 결정 제네릭은 삭제erasure 과정을 통해 구현된다[JLS, 4.6]. generic array creation 오류new List&lt;E&gt;[]new List&lt;String&gt;[]new E[] 위 코드는 전부 컴파일되지 않는다. 컴파일하려고 하면 getneric array creation 오류가 발생할 것이다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 4장. 클래스와 인터페이스 - 3","slug":"classes-and-interfaces-3","date":"2017-05-15T01:20:00.000Z","updated":"2017-05-17T03:19:50.000Z","comments":true,"path":"2017/05/15/classes-and-interfaces-3/","link":"","permalink":"https://wickso.me/2017/05/15/classes-and-interfaces-3/","excerpt":"규칙 19 - 인터페이스는 자료형을 정의할 때만 사용하라규칙 20 - 태그 달린 클래스 대신 클래스 계층을 활용하라규칙 21 - 전략을 표현하고 싶을 때는 함수 객체를 사용하라규칙 22 - 멤버 클래스는 가능하면 static으로 선언하라","text":"규칙 19 - 인터페이스는 자료형을 정의할 때만 사용하라규칙 20 - 태그 달린 클래스 대신 클래스 계층을 활용하라규칙 21 - 전략을 표현하고 싶을 때는 함수 객체를 사용하라규칙 22 - 멤버 클래스는 가능하면 static으로 선언하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 19. 인터페이스는 자료형을 정의할 때만 사용하라 상수 인터페이스 패턴은 인터페이스를 잘못 사용한 것이다. 클래스가 어떤 상수를 어떻게 사용하느냐 하는 것은 구현 세부사항이다. public interface PhysicalConstants &#123; static final double AVOGADROS_NUMBER = 6.02214199e23;&#125; 상수를 API 일부로 공개하고 싶을 때는 더 좋은 방법이 있다. 해당 상수가 이미 존재하는 클래스나 인터페이스에 강하게 연결되어 있을 때는 해당 클래스/인터페이스에 추가한다. enum 자료형의 멤버가 되어야 바람직할 때는 enum 자료형과 함께 공개한다. 객체 생성이 불가능한 유틸리티 클래스에 넣어서 공개한다. 인터페이스는 자료형을 정의할 때만 사용해야 한다. 특정 상수를 API의 일부로 공개할 목적으로는 적절치 않다. 20. 태그 달린 클래스 대신 클래스 계층을 활용하라Tagged Class 두 가지 이상의 기능을 가지고 있고, 그중 어떤 기능을 제공하는지 표시하는 tag가 달린 클래스 class Figure &#123; enum Shape &#123; RECTANGLE, CIRCLE &#125;; // 태그 필드 final Shape shape; double length; double width; double radius; // 원을 만드는 생성자 Figure(double radius) &#123; shape = Shape.CIRCLE; this.radius = radius; &#125; // 사각형을 만드는 생성자 Figure(double length, double width) &#123; shape = Shape.RECTANGLE; this.length = length; this.width = width; &#125; double area() &#123; switch(shape) &#123; case RECTANGLE: return length * width; case CIRCLE: return Math.PI * (radius * radius); default: throw new AssertionError(); &#125; &#125;&#125; 문제점 수정할 때마다 switch문에 새로운 case를 올바르게 넣어야 한다. 객체의 자료형만 봐서 그 객체가 무슨 기능을 제공하는지 알 수 없다. boilerplate code가 늘어난다. 오류 발생 가능성이 높아지고, 효율적이지 않다. 개선 코드e.g. 클래스 계층으로 변환한 결과(규칙 14) abstract class Figure &#123; abstract double area();&#125;class Circle extends Figure &#123; final double radius; Circle(double radius) &#123; this.radius = radius; &#125; double area() &#123; return Math.PI * (radius * radius); &#125;&#125;// public 클래스인 경우(규칙 14)@Datapublic class Rectangle extends Figure &#123; final private double length; final private double width; public double area() &#123; return length * width; &#125;&#125; 태그 기반 클래스 사용은 피하라. 태그 기반 클래스를 보게 된다면, 리팩토링을 통해 클래스 계층으로 변환할 방법은 없는지 고민하자. 21. 전략을 표현하고 싶을 때는 함수 객체를 사용하라 전략을 표현하고 싶을 때는 함수 객체function object를 사용하라함수 객체의 주된 용도는 전략 패턴Strategy pattern을 구현하는 것. strategy pattern 인자로 함수를 넘겨줘서 그 함수를 통해 실행 전략을 세우는 방법. 예를 들어 정렬을 한다고 할때, 어떻게 정렬하는가는 넘겨주는 것이 전략패턴. Java는 함수를 넘겨 줄수 없으나, 함수를 가지고 있는 객체(=함수 객체)를 넘겨주면 됨 // 전략 인터페이스public interface Comparator&lt;T&gt; &#123; public int compare(T t1, T t2);&#125; 문자 길이로 하고자 할 때, 익명 클래스로 구현할 수 있으나 매번 필요없는 인스턴스를 생성함 Arrays.sort(stringArray, new Comparator&lt;String&gt;() &#123; public int compare(String s1, String s1) &#123; return s1.length() - s2.length(); &#125;&#125;); 그렇다면, 싱글턴으로 만들어서 사용하는 방법. 의도가 뚜렷한 이름을 정할 수 있는 것도 장점. Arrays.sort(stringArray, StringLengthComparator.INSTANCE);class StringLengthComparator implements Comparator&lt;String&gt; &#123; public static final StringLengthComparator INSTANCE = new StringLengthComparator(); private StringLengthComparator(); public int compare(String s1, String s1) &#123; return s1.length() - s2.length(); &#125;&#125; java 8 lamdba를 이용하면 코드를 좀 더 줄일 수 있음 Comparator&lt;String&gt; stringLengthComparator = (String s1, String s2) -&gt; s1.length - s2.length;Arrays.sort(stringArray, stringLengthComparator); 전략 인터페이스(Comparator)는 실행 가능 전략 객체들(StringLengthComparator)의 자료형 구실을 한다. 따라서 실행 가능 전략 클래스(StringLengthComparator)는 굳이 public으로 만들어 공개할 필요가 없다. 대신, 전략 인터페이스가 자료형인 public static 필드들을 갖는 “호스트 클래스(host class)”를 정의하는 것도 방법이다. 실행 가능 전략 클래스는 호스트 클래스의 private 중첩 클래스(nested class)로 정의하면 된다. class Host &#123; public static final Comparator&lt;String&gt; STRING_LENGTH_COMPARATOR = (String s1, String s2) -&gt; s1.length - s2.length;&#125; String 클래스는 CASE_INSENCITIVE_ORDER라는 필드로 문자열 비교자를 공개함 22. 멤버 클래스는 가능하면 static으로 선언하라중첩클래스nested class 의 종류 다른 클래스 안에 정의된 클래스 Static Member Class Nonstatic Member Class Anonymous Class Local Class Static Member Classpublic class ExternalClass &#123; private int value; public void print() &#123; PrivateStaticMemberClass.print(); &#125; // (1) private static class PrivateStaticMemberClass &#123; public static void print() &#123; ExternalClass e = new ExternalClass(); System.out.println(e.value); &#125; &#125; public static class StaticMemberClass &#123; public static void print() &#123; System.out.println(\"public\"); &#125; &#125;&#125; // main// ExternalClass.PrivateStaticMemberClass.print(); (1) 불가능ExternalClass.StaticMemberClass.print(); // (2)(new ExternalClass()).print(); External Class의 모든 맴버에 접근 가능(private 포함) Static Member Class가 private이라면 External Class에서만 접근 가능 (1) External Class의 정적맴버 (2) NonStatic Member Class External Class와 독립적으로 존재할 수 있도록 하려면 반드시 static으로 선언 문법으로는 static 여부 차이. 그러나 다르다. External Class와 자동적으로 연결된다. public class ExternalClass &#123; private int externalClassValue; public ExternalClass(int value) &#123; this.externalClassValue = value; &#125; private int getExternalClassValue() &#123; return externalClassValue; &#125; public void print() &#123; System.out.println(externalClassValue); NonStaticMemberClass nsmc = new NonStaticMemberClass(); // (3) nsmc.setExternalClassValue(3); System.out.println(externalClassValue); &#125; class NonStaticMemberClass &#123; private int nonStaticMemberClassValue; void setExternalClassValue(int value) &#123; ExternalClass.this.externalClassValue = value; // (2) &#125; &#125;&#125; // mainExternalClass t = new ExternalClass(2);t.new NonStaticMemberClass().setExternalClassValue(4); // (3) 직접 연결도 가능t.print(); # 출력결과43 NonStatic Member Class 안에서 External Class의 메서드 호출 가능 (1) qualified this로 External Class 객체에 대한 참조 획득 가능 (2) NonStatic Member Class와 External Class의 연결은 NonStatic Member Class의 객체가 생성될때 확립 (3) Adapter를 정의할 때 많이 사용(External Class를 다른 클래스 객체인 것처럼 보이게하는 용도) public class MySet&lt;E&gt; extends AbstractSet&lt;E&gt; &#123; public Iterator&lt;E&gt; iterator() &#123; return new MyIterator(); &#125; private class MyIterator implements Iterator&lt;E&gt; &#123; ... &#125;&#125; Anonymous Class 함수 객체를 정의할 때 널리 쓰인다 표현식 중간에 등장하므로, 10줄 이하로 짧게 작성되어야 한다. 아니면 코드 가독성이 떨어진다 nonstatic context 안에서 사용될 때만 External 객체를 갖는다 public class ExternalClass &#123; private int externalClassValue = 2; private AnonymousClass ac; public void printAnonymousClassTest() &#123; ac = new AnonymousClass() &#123; private int value; @Override void print(int value) &#123; this.value = value; System.out.printf(\"Anonymous Class Test %d %d\", ExternalClass.this.externalClassValue, this.value); &#125; &#125;; ac.print(3); &#125;&#125;abstract class AnonymousClass &#123; abstract void print(int value);&#125; public class MainClass &#123; public static void main(String[] args) &#123; ExternalClass t = new ExternalClass(); t.printAnonymousClassTest(); &#125;&#125; Local Class 지역 변수 선언되는 곳에 선언된 클래스 static 맴버 불가능, nonstatic context에서만 External Class의 맴버 접근 가능 public class ExternalClass &#123; private int externalClassValue = 2; public void printLocalClassTest() &#123; // non static context class LocalClass &#123; private int value; // private static value; 불가능 LocalClass(int value) &#123; this.value = value; &#125; void print() &#123; System.out.println(externalClassValue); &#125; // External 객체 접근 가능 &#125; LocalClass lc = new LocalClass(1); lc.print(); &#125;&#125; 요약, 알아둘 것 중첩 클래스를 메서드 밖에서 사용할 수 있어야 하거나, 메서드 안에 놓기에 너무 길 경우 맴버 클래스로 정의 맴버 클래스의 객체들이 External Class의 객체들에 대한 참조를 가져야 하는 경우에서만 NonStatic Member Class로 정의","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"Template Method Pattern","slug":"template-method-pattern","date":"2017-05-02T03:57:22.000Z","updated":"2017-05-21T11:43:15.000Z","comments":true,"path":"2017/05/02/template-method-pattern/","link":"","permalink":"https://wickso.me/2017/05/02/template-method-pattern/","excerpt":"의도연산operation에 알고리즘의 뼈대만 정의하고, 구체적 처리는 서브클래스로 미룬다. 알고리즘 구조는 변경하지 않고 단계처리만 서브클래스는에서 재정의할 수 있도록 한다. 구조 활용성 어떤 한 알고리즘을 이루는 부분 중 변하지 않는 부분을 한 번 정의해 놓고 다양해질 수 있는 부분은 서브클래스에서 정의할 수 있도록 남겨두고자 할 때 서브클래스 사이의 공통적인 행동을 추출하여 하나의 공통 클래스에 몰아둠으로써 코드 중복을 피하고 싶을 때. 이것은 Opdyke와 Johnson이 설명한[OJ93][1] “refactoring to generalize”의 좋은 예이다. 먼저 기존코드에서 차이점을 찾고 이를 새로운 연산으로 분리한다. 그 다음 달라진 코드 부분을 새로운 연산을 호출하는 템플릿 메서드로 대체한다. 서브클래스의 확장을 제어할 수 있다. 템플릿 메서드가 어떤 특정한 시점에 “hook” 연산을 호출하도록 정의함으로써, 그 특정 시점에서만 확장되도록 한다.","text":"의도연산operation에 알고리즘의 뼈대만 정의하고, 구체적 처리는 서브클래스로 미룬다. 알고리즘 구조는 변경하지 않고 단계처리만 서브클래스는에서 재정의할 수 있도록 한다. 구조 활용성 어떤 한 알고리즘을 이루는 부분 중 변하지 않는 부분을 한 번 정의해 놓고 다양해질 수 있는 부분은 서브클래스에서 정의할 수 있도록 남겨두고자 할 때 서브클래스 사이의 공통적인 행동을 추출하여 하나의 공통 클래스에 몰아둠으로써 코드 중복을 피하고 싶을 때. 이것은 Opdyke와 Johnson이 설명한[OJ93][1] “refactoring to generalize”의 좋은 예이다. 먼저 기존코드에서 차이점을 찾고 이를 새로운 연산으로 분리한다. 그 다음 달라진 코드 부분을 새로운 연산을 호출하는 템플릿 메서드로 대체한다. 서브클래스의 확장을 제어할 수 있다. 템플릿 메서드가 어떤 특정한 시점에 “hook” 연산을 호출하도록 정의함으로써, 그 특정 시점에서만 확장되도록 한다. 결과 템플릿 메서드는 코드 재사용을 위한 기본 기술이다(특히 클라스 라이브러리 구현 시 중요). 템플릿 메서드는 IoC(Inversion of Control, 제어 역전) 구조를 이끌어 낸다. 즉, 부모 클래스는 서브클래스에 정의된 연산을 호출할 수 있지만 반대 방향의 호출은 안 된다.Don’t call us, we’ll call you. 할리우드 원칙(Hollywood principle) 템플릿 메서드는 여러 종류의 연산 중 하나를 호출한다. 구체 연산 AbstractClass 구체 연산 기본 연산 factory method hook operation: 필요하다면 서브클래스에서 활장할 수 있는 기본 행동을 제공하는 연산. 기본적으로 아무 내용도 정의하지 않는다. 구현 접근제어자를 이용한다. - 템플릿 메서드에서 호출하는 기본 연산들을 protected로 구현한다. 이렇게 하면 이 연산들은 템플릿 메서드만 호출할 수 있게 된다. 템플릿 메서드는 재정의하면 안되므로 맴버 함수로 만든다(final로 정의하면 재정의 불가능). 기본 연산의 수를 최소화한다. - 템플릿 메서드를 설계할 때 중요한 목표 중 하나는 서브클래스가 오버라이드해야 하는 연산의 수를 최소화하는 것이다. 재정의해야 하는 메서드가 많아질수록 사용자는 불편해진다. 네이밍 규칙을 만든다. - 재정의 연산에 접두어를 추가하여 식별이 잘되도록 할 수 있다. 예를 들어, 매킨토시 응용프로그램의 MapAPP프레임워크[App89][2]의 모든 템플릿 메서드는 Do-로 시작한다. DoCreateDocument, DoRead 예제문서 관리 응용프로그램이 새 문서를 만드는 경우로 예를 들어 보자. 모든 응용프로그램은 파일을 생성하기 전에 파일 존재 확인과 권한 확인을 하며, 특정 응용프로그램은 파일을 열기전에 로그를 출력해야 한다. 이런 경우에 openNewDocument() 템플릿 메서드를 사용할 수 있다. Application.java는 항상 확인해야할 연산(파일 존재 확인, 권한 확인)을 추상 메서드로 정의하고 템플릿 메서드에서 수행한다. Application에서 beforeCreateDocument()는 hook 연산으로 필요에따라 확장해서 사용 가능하다. 이렇게 함으로 추상 연산을 통해 알고리즘의 일부를 정의함으로써, 템플릿 메서드는 각 단계의 순서는 고정하되 각각의 서브클래스는 필요에 따라 이들 단계의 처리를 다양화시킬 수 있다. Application.java(AbstractClass) public abstract class Application &#123; public Document newDcument() &#123; return createDocument(); &#125; public abstract Document createDocument(); // factory method // template method final public Document openNewDocument(String fileName) &#123; if (!existDocument(fileName)) &#123; throw new IllegalStateException(\"The file doesn't exist: \" + fileName); &#125; if (!canOpenDocument(fileName)) &#123; throw new IllegalStateException(\"can't open the document: \" + fileName); &#125; beforeCreateDocument(); // hook 연산 Document document = createDocument(); // template method에서 factory method가 호출된다. document.setFileName(fileName); return document; &#125; protected abstract boolean existDocument(String fileName); protected abstract boolean canOpenDocument(String fileName); protected void beforeCreateDocument() &#123;&#125; // hook: 기본적으로 아무 내용도 정의하지 않는다.&#125; MyApplication.java(ConcreteClass) public class MyApplication extends Application &#123; private static final String BASE_PATH = \"/local/path/base\"; @Override public void beforeCreateDocument() &#123; System.out.println(\"create document\"); &#125; @Override public Document createDocument() &#123; return new WordDocument(); &#125; @Override protected boolean existDocument(String fileName) &#123; return (new File(BASE_PATH + fileName)).exists(); &#125; ...&#125; 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. [GOF{kr}:419] - 템플릿 메서드 GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015. 1.William F. Opdyke and Ralph E. Johnson. Creating abstract superclasses by refactoring. In Proceedings of the 21st Annual Computer Science Conference (ACM CSC ‘93), pages 66–73, Indianapolis, IN, February 1993. ↩2.Addison-Wesley, Reading, MA. NEXTSTEP General Reference: Release 3, Volumes 1 and 2, 1994. ↩","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"design pattern","slug":"design-pattern","permalink":"https://wickso.me/tags/design-pattern/"},{"name":"befavioral pattern","slug":"befavioral-pattern","permalink":"https://wickso.me/tags/befavioral-pattern/"}]},{"title":"이펙티브자바 4장. 클래스와 인터페이스 - 2","slug":"classes-and-interfaces-2","date":"2017-04-12T01:00:00.000Z","updated":"2017-04-12T01:00:00.000Z","comments":true,"path":"2017/04/12/classes-and-interfaces-2/","link":"","permalink":"https://wickso.me/2017/04/12/classes-and-interfaces-2/","excerpt":"규칙 16 - 계승하는 대신 구성하라규칙 17 - 계승을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 계승을 금지하라규칙 18 - 추상 클래스 대신 인터페이스를 사용하라","text":"규칙 16 - 계승하는 대신 구성하라규칙 17 - 계승을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 계승을 금지하라규칙 18 - 추상 클래스 대신 인터페이스를 사용하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 16. 계승하는 대신 구성하라TODO 17. 계승을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 계승을 금지하라 재정의 가능 메서드를 내부적으로 어떻게 사용하는지 반드시 문서에 남겨라. 관습적으로, 재정의 가능 메서드를 어떤 식으로 호출하는지는 메서드 주석문 마지막에 명시한다. 18. 추상 클래스 대신 인터페이스를 사용하라 이미 있는 클래스를 개조해서 새로운 인터페이스를 구현하도록 하는 것은 간단하다. 인터페이스는 믹스인mixin을 정의하는 데 이상적이다. 믹스인은 클래스가 “주 자료형primary type“ 이외에 추가로 구현할 수 있는 자료형으로, 어떤 선택적 기능을 제공한다는 사실을 선언하기 위해 쓰인다. (e.g. Comparable) 인터페이스는 비 계층적인(nonhierarchical) 자료형 프레임워크를 만들 수 있도록 한다. public interface SingerSongwriter extends Singer, Songwriter &#123; AudioClip strum(); void actSensitive();&#125; 인터페이스를 쓰지 않으려면 필요한 속성 조합마다 별도의 클래스를 만들어 거대한 클래스 계층을 만들어야 한다. 필요한 속성이 n개가 있다면 지원해야 하는 조합의 가짓수는 2n개에 달한 것이다. 이런 문제는 조합 폭증combinatorial explosion이라는 이름으로 알려져 있다. 인터페이스를 사용하면 포장 클래스 숙어wrapper class idiom를 통해(규칙 16) 안전하면서도 강력한 기능 개선이 가능하다. 추상 골격 구현 클래스abstract skeletal implementation를 중요 인터페이스마다 두면, 인터페이스의 장점과 추상 클래스의 장점을 결합할 수 있다. 인터페이스로는 자료형을 정의하고, 구현하는 일은 골격 구현 클래스에 맡기면 된다. 관습적으로 골격 구현 클래스의 이름은 AbstractInterface와 같이 정한다. (e.g. Collection Framework에는 인터페이스별로 골격 구현 클래스들이 하나씩 제공된다. AbstractCollection, AbstractSet, AbstractList, AbstractMap) 골격 구현 클래스를 적절히 정의하기만 하면, 프로그래머는 쉽게 인터페이스를 구현할 수 있다. 추상클래스의 장점으로 인터페이스보다 추상 클래스가 발전시키기 쉽다. 하지만 java 1.8에서는 인터페이스에 default 메서드를 추가할 수 있다(하지만 인터페이스당 한 개의 default 메서드). 인터페이스가 공개되고 널리 구현된 다음에는, 인터페이스 수정이 거의 불가능하다. 그러므로, public 인터페이스는 극도로 주의해서 설계해야 하며 실제로 여러 구현을 만들어 보면서 광범위하게 테스트해야 한다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 4장. 클래스와 인터페이스 - 1","slug":"classes-and-interfaces-1","date":"2017-03-29T01:00:00.000Z","updated":"2017-05-21T11:41:25.000Z","comments":true,"path":"2017/03/29/classes-and-interfaces-1/","link":"","permalink":"https://wickso.me/2017/03/29/classes-and-interfaces-1/","excerpt":"규칙 13 - 클래스와 맴버의 접근 권한을 최소화하라규칙 14 - public 클래스 안에는 public 필드를 두지 말고 접근자 메서드를 사용하라규칙 15 - 변경 가능성을 최소화하라","text":"규칙 13 - 클래스와 맴버의 접근 권한을 최소화하라규칙 14 - public 클래스 안에는 public 필드를 두지 말고 접근자 메서드를 사용하라규칙 15 - 변경 가능성을 최소화하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 13. 클래스와 맴버의 접근 권한을 최소화하라 소프트웨어 설계의 기본적인 원칙 중 하나 - 정보 은닉information hiding, 캡슐화encapsulation 접근 권한은 가능한 낮춰라. public static final 필드를 제외한 어떤 필드도 public 필드로 선언하지 마라 public static final 필드가 참조하는 객체는 변경 불가능 객체로 만들어라 정보 은닉, 캡슐화 시스템을 구성하는 모듈 사이의 의존성을 낮춤decouple 성능을 보장하는 것은 아니지만, 효과적인 성능 튜닝을 가능하게 한다. 어떤 모듈이 성능 문제를 일으키는지 프로파일링profiling 하기 용이하기 때문(규칙 55) 소프트웨어의 재사용 가능성을 높인다. 대규모 시스템 개발 과정의 리스트를 낮춘다. 접근 제어access control 메커니즘은 클래스와 인터페이스, 그리고 그 멤버들의 접근 권한accessibility을 규정한다(JLS, 6.6) 각 클래스와 멤버는 가능한 한 접근 불가능하도록 만들라는 것 - 가장 낮은 접근 권한 설정 객체 필드instance field는 절대로 public으로 선언하면 안 된다(규칙 14). 변경 가능 public 필드를 가진 클래스는 다중 스레드에 안전하지 않다. 예외적으로 어떤 상수들이 클래스로 추상화된 결과물의 핵심적 부분을 구성한다고 판단되는 경우, 해당 상수들을 public static final 필드들로 선언하여 공개할 수 있다. 이런 필드들은 관습적으로 대문자로 구성된 이름을 가지며, 이름을 구성하는 단어들은 밑줄 기호로 구분한다(규칙 56). 이런 필드들은 반드시 기본 자료형 값들을 갖거나, 변경 불가능 객체를 참조해야 한다(규칙 15). 길이가 0 아닌 배열은 언제나 변경 가능하므로, public static final 배열 필드를 두거나, 배열 필드를 반환하는 접근자accessor를 정의하면 안 된다. - 보안문제 유발 // AS-IS: 보안 문제를 초래할 수 있는 코드public static final Thing[] VAUES = &#123;...&#125;;// TO-BE: (1) 변경 불가능 public 리스트 사용private static final Thing[] PRIVATE_VALUES = &#123;...&#125;;public static final List&lt;Thing&gt; VALUES = Collections.unmodifiableList(Arrays.asList(PRIVATE_VALUES));// TO-BE: (2) 복사해서 반환하는 메서드 추가private static final Thing[] PRIVATE_VALUES = &#123;...&#125;;public static final Thing[] values() &#123; return PRIVATE_VALUES.clone();&#125; 14. public 클래스 안에는 public 필드를 두지 말고 접근자 메서드를 사용하라 getter/setter(접근자 메서드)를 사용하자 캡슐화의 이점 불변식 가능 필드 사용시 다른 동작 가능 (+) boilerplate code를 줄이기 위해서 lombok의 @Data, @Value 활용 원칙을 어긴 Java 클래스 - Point.class, Dimension.class 이런 클래스는 참고하지 않는 것이 좋다. Dimension 클래스가 내부 표현을 공개한 것은 아직까지도 해결되지 않고 있는 심각한 성능 문제 때문이다(규칙 55에 설명). 15. 변경 가능성을 최소화하라요약 Mutable Class로 만들 타당한 이유가 없다면, 반드시 Immutable Class로 만들어야 한다 모든 getter 마다 그에 대응하는 setter를 두는 것은 피하라 유일한 장점은 특정 상황에서 성능 문제가 생길 수 있다는 것이다 작은 객체는 반드시 immutable로 만들어라 Immutable Class로 만들 수 없다면, 변경 가능성을 최대한 제한하라 특별한 이유가 없다면 모든 필드는 final로 선언하라 특별한 이유가 없다면, 생성자 이외에 public 초기화 메서드나 정적 팩터리 메서드를 제공하지 마라 재 초기화 메서드도 제공하지 마라. 코드 복잡성만 늘어나고, 성능 향상에 도움 되는 경우는 거의 없다 변경 불가능immutable 클래스 생성 규칙 객체 상태를 변경하는 메서드(수정자mutator 메서드 등)를 제공하지 않는다. 계승할(상속 받을) 수 없도록 한다. - e.g. public final class { ... } 모든 필드는 final로 선언한다. 프로그래머의 의도가 분명해짐 자바 메모리 모델에 명시된 바와 같이[JLS, 17.5], 새로 생성된 객체에 대한 참조가 동기화 없이 다른 스레드로 전달되어도 안전 모든 필드를 private로 선언한다. 변경 가능 컴포넌트에 대한 독점적 접근권을 보장한다. 변경 가능 객체에 대한 참조를 클라이언트는 획득할 수 없어야 한다. 그런 필드는 클라이언트가 제공하는 객체로 초기화해서는 안되고, 접근자accessor 또한 그런 필드를 반환해서는 안 된다. 생성자나 접근다, readObject 메서드(규칙 76)안에서는 방어적 복사본defensive copy을 만들어야 한다(규칙 39). Immutable Object 특징 변경 불가능 객체는 단순하다. 생성될 때 부여된 한 가지 상태만 갖는다. 변경 불가능 객체는 스레드에 안전(thread-safe)할 수밖에 없다. 어떤 동기화도 필요 없으며, 여러 스레드가 동시에 사용해도 상태가 훼손될 일이 없다. 변경 불가능 객체는 자유롭게 공유할 수 있다. 방어적 복사본(규칙 39)을 만들 필요가 없단 뜻이기도 하다. 변경 불가능 객체는 그 내부도 공유할 수 있다. 변경 불가능 객체는 다른 객체의 구성요소로도 훌륭하다. 변경 불가능 객체의 유일한 단점은 값마다 별도의 객체를 만들어야 한다는 점이다. 따라서 객체 생성 비용이 높을 가능성이 있다. Immutable Object 생성하는 다른 방법모든 생성자를 private이나 package-private로 선언하고 public 생성자 대신 public 정적 팩터리 제공(규칙 1) - 장점은 규칙 1 확인","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 3장. 모든 객체의 공통 메서드 - 2","slug":"methods-common-to-all-objects-2","date":"2017-03-22T01:00:00.000Z","updated":"2017-05-21T11:41:12.000Z","comments":true,"path":"2017/03/22/methods-common-to-all-objects-2/","link":"","permalink":"https://wickso.me/2017/03/22/methods-common-to-all-objects-2/","excerpt":"규칙 11 - clone을 재정의할 때는 신중하라규칙 12 - Comparable 구현을 고려하라","text":"규칙 11 - clone을 재정의할 때는 신중하라규칙 12 - Comparable 구현을 고려하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 11. clone을 재정의할 때는 신중하라Cloneable 인터페이스 어떤 객체가 clone을 허용한다는 사실을 알리는 데 쓰려고 고안된 mixin 인터페이스(규칙 18) clone 메서드가 없으며, Object의 clone 메서드는 potected로 선언되어 있다. protected로 선언된 Object의 clone 메서드가 어떻게 동작할지 정한다. 어떤 클래스가 Cloneable을 구현하면, Object의 clone 메서드는 해당 객체를 필드 단위로 복사한 객체를 반환 어떤 클래스가 Cloneable을 구현하지 않으면 CloneNotSupportedExceptiond을 던짐 인터페이스를 괴상하게 이용한 사례 일반적으로 인터페이스를 구현한다는 것은 클래스가 무슨 일을 할 수 있는지 클라이언트에게 알리는 것 Clonealed은 상위 클래스의 protected 맴버가 어떻게 동작할지 규정하는 용도 Cloneable을 구현해서 어떤 결과를 얻으려면, 해당 클래스뿐 아니라 그 모든 상위 클래스들은 복잡한 데다 강제할 수 없고(unenforceable) 문서도 부족한 프로토콜을 따라야 한다. 그리고 그렇게 하면 언어 외적인(ectralinguistic) 객체 생성 메커니즘이 탄생한다. 생성자 호출 없이도 객체를 생성할 수 있게 되는 것이다. java.lang.Object.clone() 일반 규약 객체의 복사본을 만들어서 반환 “복사”의 정확한 의미는 클래스마다 다르며, 일반적으로 다음과 같은 조건이 충족되어야 한다. True: x.clone() != x True 그러나 반드시 True여야 하는 것은 아님: ① x.clone().getClass() == x.getClass() x.cline().equals(x) 내부 자료구조까지 복사해야 될 수도 있다. ② 어떤 생성자도 호출되지 않는다. clone() 규약의 문제점 ② 규정은 너무 심하다. clone이 만드는 복사본의 내부 객체는 생성자로 만들 수도 있다. 클래스가 final로 선언되어 있다면, 생성자로 만든 객체를 반환하도록 clone을 구현할 수도 있다. ① 규정은 너무 느슨하다. 중점? 비-final 클래스에 clone을 재정의할 때는 반드시 super.clone을 호출해 얻은 객체를 반환해야 한다. 실질적으로 Cloneable 인터페이스를 구현하는 클래스는 제대로 동작하는 public clone 메서드를 제공해야 한다. 라이브러리가 할 수 있는 일을 클라이언트에게 미루지 말라. 사실상, clone 메서드는 또 다른 형태의 생성자다. 원래 객체를 손상시키는 일이 없도록 해야 하고, 복사본의 불변식invariant도 제대로 만족시켜야 한다. clone의 아키텍처는 변경 가능한 객체를 참조하는 final 필드의 일반적 용볍과 호환되지 않는다. 객체를 복사할 대안을 제공하거나, 아예 복제 기능을 제공하지 않는 것이 낫다. 객체 복제를 지원하는 좋은 방법은 복사 생성자copy constructor나 복사 팩터리copy factory를 제공하는 것이다. 규칙 12. Comparable 구현을 고려하라public interface Comparable&lt;T&gt; &#123; int compareTo(T t);&#125; compareTo()는 Comparable 인터페이스에 포함된 유일한 메서드. equals()와 비슷하지만, 단순한 동치성 검사 이외에 순서 비교가 가능하며, 좀 더 일반적. Comparable 인터페이스를 구현하는 클래의 객체들은 자연적 순서natural ordering를 갖게 됨 - Arrays.sort(a)로 정렬 가능 compateTo()의 일반 규약(equals와 비슷) 객체와 인자로 주어진 객체 비교 이 객체의 값이 인자로 주어진 객체보자 작으면 음수, 같으면 0, 크면 양수 인자로 전달된 객체의 자료형이 이 객체와 비교 불가능할 경우 ClassCastException 예외 던짐 모든 x와 y에 대해 sgn(x.compareTo(y)) == -sgn(y.compareTo(x))가 만족되도록 해야 한다. (y.compareTo(x)가 예외를 발생시킨다면 x.compareTo(y)도 그래야 하고, 그 역도 성립해야 한다.) 추이성transitivity이 만족되도록 해야 한다. 즉, (x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0)이면 x.compareTo(z) &gt; 0이어야 한다. x.compareTo(y) == 0 이면 sgn(x.compareTo(z)) === sgn(y.compareTo(z))이다. 강력히 추천하지만 절대적 요구사항은 아닌 조건 하나는 (x.compareTo(y) == 0) == (x.equals(y))이다. 이 조건을 만족하지 않는 클래스는 반드시 그 사실을 명시해야 한다. // 주의: 이 클래스의 객체들은 equals에 부합하지 않는 자연적 순서를 따른다. 규약을 준수하지 않는 클래스는 비교 연산에 기반한 클래스들을 오동작시킬 수 있다. - TreeSet·TreeMap 같은 sorted collection, Arrays·Collections 같은 유틸리티 클래스, 탐색과 정렬 알고리즘을 포함하는 클래스 compareTo()의 필드 비교 방식은 동치성 검사라기보단 순서 비교다. 클래스에 선언된 중요 필드가 여러 개인 경우, 필드 비교 순서가 중요하다. 가장 중요한 필드부터 시작해서 차례로 비교해야 한다. compareTo()를 구현하면서 값 비교할때 오버플로우를 조심 -&gt; 이런 문제는 대부분 정상동작하기 때문에 디버깅하기 어렵다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 3장. 모든 객체의 공통 메서드 - 1","slug":"methods-common-to-all-objects-1","date":"2017-03-11T01:00:00.000Z","updated":"2017-05-21T11:40:53.000Z","comments":true,"path":"2017/03/11/methods-common-to-all-objects-1/","link":"","permalink":"https://wickso.me/2017/03/11/methods-common-to-all-objects-1/","excerpt":"규칙 8 - equals를 재정의할 때는 일반 규약을 따르라규칙 9 - equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야 한다규칙 10 - toString은 항상 재정의하라","text":"규칙 8 - equals를 재정의할 때는 일반 규약을 따르라규칙 9 - equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야 한다규칙 10 - toString은 항상 재정의하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 8. equals를 재정의할 때는 일반 규약을 따르라Override 상황Override 하지 않는 경우 각각의 객체가 고유할 때 값value 대신 활성 개체active entity를 나타내는 Thread 같은 클래스. 논리적 동일성logical equality 검사 방법이 상관 없을 때 Random 클래스를 설계할 때 값 비교를 사용안할 것 같아서 구현하지 않는 것처럼 필요 없을 경우 상위 클래스에서 정의한 equals가 하위 클래스에서 사용 가능할 때 클래스가 private, package-private로 선언되었고, equals를 호출할 일이 없을 때 필자는 이런 상황에서는 반드시 equals를 재정의해야 한다고 본다. 실수로 equals를 호출할 수도 있기 때문. @Overridepublic Boolean equals(Object obj) &#123;throw new AssertionError(); // 호출되면 안 되는 메서드를 호출했다는 뜻&#125; Override 하는 경우 논리적 동일성logical equality의 개념을 지원하는 클래스일 때 상위 클래스의 equals가 하위 클래스의 필요를 충족하지 못할 때 Override 할 필요가 없는 경우 개체 통제(규칙 1) 기능으로 하나의 객체만 존재하는 클래스(e.g. 싱글톤, enum(규칙 30)) Override 규약, 주의equals 메서드를 정의할 때 준수해야 하는 일반 규약general contract Object 클래스 명세(specification)[JavaSE6] 동치 관계equivalence relation 구현, 다음과 같은 관계를 동치 관계라 한다. 반사성Reflexivity: x.equals(x)는 true 대칭성Symmetry: x.equals(y)가 true일 때, y.equals(x)도 true e.g. 대칭성 위반 코드 public class CustomString &#123; private final String str; @Override public boolean equals(Object o) &#123; if (o instanceof CustomString) &#123; return str.equalsIgnoreCase(((CustomString) o).getStr()); &#125; if (o instanceof String) &#123; // 대칭성 위반 return str.equalsIgnoreCase((String) o); &#125; return false; &#125;&#125; CustomString cs = new CustomString(\"string\");String s = \"string\";cs.equals(s); // trues.equals(cs); // falseList&lt;CustomString&gt; list = new ArrayList&lt;&gt;();...// JVM에 따라 결과가 달라진다.list.contains(s); equals가 따라야 할 규약을 어기면, 그 객체를 만난 다른 객체들이 어떻게 행동할지 예측할 수 없게 된다. 추이성Transitivity: x.equals(y)가 true이고, y.equals(z)가 true이면 x.equals(z)도 true e.g. 하위 클래스에서 새로운 값 컴포넌트value component를 추가하는 상황. ColorPoint 클래스(하위 클래스)의 equals()에서 새로운 값 color를 비교하는 로직을 추가할 경우, 대칭성에 위반 @AllArgsConstructorpublic class Point &#123; private final int x, y; @Override public boolean equals(Object obj) &#123; if (!(obj instanceof Point)) &#123; return false; &#125; Point p = (Point)obj; return p.x == x &amp;&amp; p.y == y; &#125;&#125;public class ColorPoint extends Point &#123; private final Color color; public ColorPoint(int x, int y, Color color) &#123; super(x, y); this.color = color; &#125; // 대칭성 위반 @Override public boolean equals(Object obj) &#123; if (!(obj instanceof ColorPoint)) &#123; return false; &#125; return super.equals(obj) &amp;&amp; ((ColorPoint)obj).color == color; &#125;&#125; Point p1 = new Point(1, 2);Point p2 = new ColorPoint(1, 2, Color.BLUE);p1.equals(p2); // truep2.equals(p1); // false 그래서 Point 객체일 때 color 값을 비교안하도록 할 경우, 대칭성은 보존되지만 추이성 위반 public class ColorPoint extends Point &#123; ... // 추이성 위반 @Override public boolean equals(Object obj) &#123; if (!(obj instanceof Point)) return false; if (!(obj instanceof ColorPoint)) return obj.equals(this); return super.equals(obj) &amp;&amp; ((ColorPoint)obj).color == color; &#125;&#125; Point p0 = new ColorPoint(1, 2, Color.RED);Point p1 = new Point(1, 2);Point p2 = new ColorPoint(1, 2, Color.BLUE);p0.equals(p1); // truep1.equals(p2); // truep0.equals(p2); // false 사실 이것은 객체 지향 언어에서 동치 관계equivalence relation를 구현할 때 발생하는 본질적 문제다. 객체 지향적 추상화object-oriented abstraction의 혜택을 누리지 않을 거라면 모를까, 객체 생성 가능 클래스를 계승하여 새로운 값 컴포넌트를 추가하면서 equals 규약을 어기지 않을 방법은 없다. TO-DO: 리스코프 대체 원칙 위반(p52) ∴ Composition 으로 구현(규칙 16). public class ColorPoint &#123; private final Point point; private final Color color; public ColorPoint(int x, int y, Color color) &#123; if(color == null) throw new NullPointerException(); point = new Point(x, y); this.color = color; &#125; public Point asPoint() &#123; return point; &#125; @Override public boolean equals(Object obj) &#123; if(!(obj instanceof ColorPoint)) return false; ColorPoint cp = (ColorPoint) obj; return cp.point.equals(point) &amp;&amp; cp.color.equals(color); &#125;&#125; Point p0 = new ColorPoint(1, 2, Color.RED).asPoint();Point p1 = new Point(1, 2);Point p2 = new ColorPoint(1, 2, Color.BLUE).asPoint();p0.equals(p1); // truep1.equals(p0); // truep0.equals(p1); // truep1.equals(p2); // truep0.equals(p2); // true cf. lombok @Value 적용한 클래스는 final class가 되므로 상속 불가. 롬북 활용할 경우 @EqualsAndHashCode@AllArgsConstructorpublic class Point &#123; private final int x, y;&#125;@EqualsAndHashCodepublic class ColorPoint extends Point &#123; private final Color color; public ColorPoint(int x, int y, Color color) &#123; super(x, y); this.color = color; &#125;&#125; Point p0 = new ColorPoint(1, 2, Color.RED);Point p1 = new Point(1, 2);Point p2 = new ColorPoint(1, 2, Color.BLUE);p0.equals(p1); // falsep1.equals(p0); // falsep0.equals(p1); // falsep1.equals(p2); // falsep0.equals(p2); // false 일관성Consistency: 값의 변화가 없다면 x.equals(y)는 호출 횟수에 상관없이 항상 같아야 함 클래스를 구현할 때는 Mutable or immutable 을 깊이 생각해본다(규칙 15). 신뢰성이 보장되지 않는 자원unreliable resource들을 비교하는 equals를 구현하는 것은 삼가라. 그렇지 않으면 일관성 규약을 만족시키기가 너무 어려움. Null에 대한 비 동치성Non-nullity: null이 아닌 참조 x에 대해서 x.equals(null)은 항상 false equals의 일반 규약에서는 예외가 발생하는 것을 허용하지 않는다(e.g. NPE). 그래서 상당수의 클래스는 equals() 안에서 null 조건을 명시적으로 검사하는데(e.g. if (o == null) return false;), 이런 검사는 불필요하다. 왜냐하면, equals 메서드는 먼저 인자를 형변환cast하는데, instanceof 연산자는 첫 번째 피연산자가 null이면 무조건 false를 반환한다[JLS, 15.20.2]. @Overridepublic boolean equals(Object e) &#123; if (!(o instanceof CustomType)) &#123; return false; &#125; ...&#125; equlas 메서드를 구현하기 위해 따라야 할 지침 == 연산자를 사용하여 equals의 인자가 자기 자신인지 검사 -&gt; 단순히 성능 최적화performance optimization instanceof 연산자를 사용하여 인자의 자료형이 정확한지 검사 equals의 인자를 정확한 자료형으로 변환 각각의 필드가 일치하는지 검사 equals 메서드 구현을 끝냈다면, 대칭성·추이성·일관성의 세 속성이 만족하는지 검토 -&gt; unit test (+) 추가 주의 사항 equals를 구현할 떄는 hashCode도 재정의하라 너무 머리 쓰지 마라 equals 메서드의 인자 형을 Object에서 다른 것으로 바꾸지 마라 규칙 9. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야 한다 Object 일반 규약[JavaSE6] 응용프로그램 실행 중에 같은 객체의 hashCode를 여러 번 호출하는 경우, equals가 사용하는 정보들이 변경되지 않았다면, 언제나 동일한 정수가 반환되어야 한다. 다만 프로그램이 종료되었다가 다시 실행되어도 같은 값이 나올 필요는 없다. equals(Object) 메서드가 같다고 판정한 두 객체의 hashCode 값은 같아야 한다. equals(Object) 메서드가 다르다고 판정한 두 객체의 hashCode 값은 꼭 다를 필요는 없다.그러나 서로 다른 hashCode 값이 나오면 hash table의 성능이 향상될 수 있다는 점은 이해하고 있어야 한다. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야 한다. override 하지 않으면 Object 일반 규약중 두번째, 같은 객체는 같은 해시 코드 값을 가져야 한다는 규약이 위반되는 것이다. 재정의하지 않으면 Hash 기반 컬렉션과 함께 사용하면 오동작한다(e.g. HashMap, HashSet, …) 좋은 해시 함수는 다른 객체에서 다른 해시 코드를 반환하는 경향이 있다. - 충돌Collision 회피 이상적인 해시 함수 만드는 방법 책 참고 - p64 lombok의 @EqualsAndHashCode 참고(책의 방법과 비슷) 해시 코드 계산 비용이 높은 변경 불가능 클래스를 만들 때는, 재계산하는 대신 캐시해 두어야 할 수도 있다. 또한 경우에 해시 키에 따라 lazy initialization도 가능하다. 주의할 것은, 성능을 개선하려고 객체의 중요 부분을 해시 코드 계산 과정에서 생략하면 안된다. 참고 Java HashMap은 어떻게 동작하는가? 규칙 10. toString은 항상 재정의하라// 이것보단PhoneNumber@163b91// 이게 훨씬 낫다!(070) 867-5309 “모든 하위 클래스는 이 메서드를 재정의함이 바람직하다.” - toString 일반 규약 public class PhoneNumber &#123; private Agency agency; // 통신사 private String number; // 전화번호 public Agency getAgency() &#123; return agency; &#125; ④ /** * 전화번호를 문자열로 변환해서 반환한다. * \"[SKT] 010-1234-1234\" 형식으로 반환된다. ③ * .... */ @Override public String toString() &#123; ① return agency.getName() + \" \" + number; ② &#125;&#125; toString을 잘 만들어 놓으면 클래스를 좀 더 쾌적하게 사용할 수 있다. 가능하다면 toString()는 객체 내의 중요 정보를 전부 담아 반환해야 한다. toString이 반환하는 문자열의 형식을 명시하건 그렇지 않건 간에, 어떤 의도인지는 문서에 분명하게 남겨야 한다. toString이 반환하는 문자열에 포함되는 정보들은 전부 프로그래밍을 통해서 가져올 수 있도록(programmatic access)하라. toString에 포함되는 정보를 가져올 수 있는 accessor를 만들지 않으면, 클라이언트는 toString을 파싱하려 할 것이다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 2장. 객체 생성과 삭제 - 3","slug":"creating-and-destroying-objects-3","date":"2017-02-21T01:00:00.000Z","updated":"2017-05-21T11:42:01.000Z","comments":true,"path":"2017/02/21/creating-and-destroying-objects-3/","link":"","permalink":"https://wickso.me/2017/02/21/creating-and-destroying-objects-3/","excerpt":"규칙 6 - 유효기간이 지난 객체 참조는 폐기하라규칙 7 - 종료자 사용을 피하라","text":"규칙 6 - 유효기간이 지난 객체 참조는 폐기하라규칙 7 - 종료자 사용을 피하라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 6. 유효기간이 지난 객체 참조는 폐기하라e.g. 메모리 누수 public class Stack &#123; private Object[] element = new Object[16]; private int size = 0; public void push(Object e) &#123; ensureCapacity(); elements[size++] = e; &#125; public Object pop() &#123; if (size == 0) throw new EmptyStackException(); return elements[--size]; &#125; private void ensureCapacity() &#123; if (elements.length == size) &#123; elements = Arrays.copyOf(elements, 2 * size + 1); &#125; &#125;&#125; 스택이 커졌다가 줄어들 때, 인덱스 값이 size보다 큰 곳에 있는 요소들(쓰레기 값)은 GC가 처리하지 못한다. 스택이 그런 객체에 대한 만기 참조obsolete reference를 제거하지 않기 때문이다. 만기 참조란 다시 이용되지 않을 참조reference를 말한다. 자동적으로 쓰레기 객체를 수집하는 언어에서 발생하는 메모리 누수 문제(≒ 의도치 않은 객체 보유unintentional object retention)는 찾아내기 어렵다. 해결방안만기 참조를 제거하는 가장 좋은 방법은, 해당 참조가 보관된 변수의 유효범위socpe를 최대한 좁게 만들어 벗어나게 두는 것이다(규칙 45). 위 예제 Stack과 같이 자체적으로 메모리는 관리하는 경우에는, 쓸 일이 없는 객체 참조는 반드시 null로 바꿔준다. public Object pop() &#123; if (size == 0) throw new EmptyStackException(); Object result = elements[--size]; elements[size] = null; return result;&#125; 흔히 메모리 누수가 발견되는 곳 자체적으로 관리하는 메모리가 있는 클래스 캐시cache: 객체 참조를 캐시 안에 넣어 놓고 잊어버리는 일이 많기 때문. (수명이 키에 대한 외부 참조의 수명에 따라 결정되는 상황에는 WeakHashMap 활용) 리스너listener등의 역호출자callback - 콜백을 명시적으로 제거하지 않을 경우, 적절한 조치를 취하기 전까지 메모리는 점유된 상태. 해결방안으로 콜백에 대한 약한 참조weak reference만 저장하는 것(WeakHashMap) 규칙 7. 종료자 사용을 피하라finalize?public class Object &#123; /** * Called by the garbage collector on an object when garbage collection * determines that there are no more references to the object. * ... */ protected void finalize() throws Throwable &#123; &#125;&#125; ‼️ 종료자finalizer는 예측 불가능하며, 대체로 위험하고, 일반적으로 불필요하다. … 어쨌든 종료자 사용은 피하는 것이 원칙이다. GC가 객체에 대한 참조가 더 이상 없다고 판단할 때 GC로부터 호출된다. 하지만, 즉시 실행되리라는 보장이 전혀 없다(JLS, 12.6). 따라서 긴급한(time-critical) 작업을 종료자 안에서 처리하면 안 된다(e.g. finalize안에서 파일 닫기). 종료자의 실행시점은 GC 알고리즘에 좌우되는데, 이 알고리즘은 JVM 구현마다 크게 다르다. 종료자의 더딘 실행tardy finalization은 단순히 이론적인 문제가 아니다. 클래스에 종료자를 붙여 놓으면, 드문 일이지만 객체 메모리 반환이 지연될 수도 있다. 종료자가 실행되지 않은 객체가 남은 상태로 프로그램이 끝나는 일도 충분히 가능하다. 그러므로 지속성이 보장되어야 하는 중요 상태 정보critical persistent state는 종료자로 갱신하면 안 된다. System.gc()나 System.runFinalization() 같은 메서드는 종료자 실행 가능성을 높여주긴 하지만 보장하지 않는다. System.runFinalizersOnExit(), Runtime.runFinalizersOnExit()는 종료자 실행을 보장하지만, 심각한 결함을 갖고 있어 이미 명세에서 deprecated 되었다. 종료자를 사용하면 프로그램 성능이 심각하게 떨어진다. 명시적인 종료 메서드termination method를 하나 정의하고, 더 이상 필요하지 않는 객체라면 클라이언트가 해당 메서드를 호출하도록 하라. 명심할 것은, 종료 여부를 객체 안에 보관해야 한다(유효하지 않은 객체임을 표시하는 private 필드 선언). 명시적 종료 메서드는 보통 try-finally 문과 함께 쓰인다. 객체 종료를 보장하기 위해서다. Java1.7부터는 try-with-resources문 제공하기 때문에 finally 블록은 사용하지 않아도 된다(try-with-resources). 사용하기 적합한 곳 명시적 종료 메서드 호출을 잊을 경우를 대비하는 안전망safety net으로서의 역할. 종료자는 반환되지 않은 자원을 발견하게 될 경우 반드시 log를 남겨야 한다. 클라이언트 코드에 버그가 있는 것이므로, 고치도록 알려야 하기 때문이다. (추가 비용을 감당하면서 구현할 가치가 있는지 신중하게 생각한다) 네이티브 피어native peer: 일반 자바 객체가 네이티브 메서드를 통해 기능 수행을 위임하는 네이티브 객체와 연결된 객체를 다룰 때. 네이티브 피어는 일반 객체가 아니므로, 객체가 소멸되더라도 GC는 모른다(GC가 알 수 없을 뿐더라 Java peer가 반환될 때 같이 반환할 수도 없다). 네이티브 피어가 중요한 자원을 점유하고 있지 않다고 가정한다면, 종료자는 그런 객체의 반환에 걸맞다. 즉시 종료되어야 하는 자원을 포함하는 경우에는, 명시적인 종료 메서드를 클래스에 추가해야 한다. 주의할 점 finalizer chaining이 자동으로 이루어지지 않는다. 종료자를 구현한 클래스를 상속받은 경우, 하위 클래스의 종료자는 상위클래스의 종료자를 명시적으로 호출해야 한다. @Overrideprotected void finalize() throws Throwable &#123; try &#123; ... &#125; finally &#123; // 반드시 호출시키기 위해 try-finally 사용 super.finalize(); &#125;&#125; 더 나은 방법 - 종료 보호자 패턴 종료되어야 하는 객체의 클래스마다 안에 종료자를 정의하는 대신 익명 클래스를 활용하는 방법. 이 익명 클래스로 만든 객체를 종료 보호자finalizer guardian라고 한다. Foo 객체의 참조가 사라지는 순간 종료 보호자도 실행 가능한 상태가 된다. // 종료 보호자 숙어(Finalizer Fuardian idiom)public class Foo &#123; // 이 객체는 바깥 객체(Foo)를 종료시키는 역할만 한다 private final Object finalizerFuardian = new Object() &#123; @Override protected void finaliza() throws Throwable &#123; // 바깥 Foo 객체를 종료시킴 &#125; &#125;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 2장. 객체 생성과 삭제 - 2","slug":"creating-and-destroying-objects-2","date":"2017-02-12T01:00:00.000Z","updated":"2017-05-21T11:41:53.000Z","comments":true,"path":"2017/02/12/creating-and-destroying-objects-2/","link":"","permalink":"https://wickso.me/2017/02/12/creating-and-destroying-objects-2/","excerpt":"규칙 3 - private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라규칙 4 - 객체 생성을 막을 때는 private 생성자를 사용하라규칙 5 - 불필요한 객체는 만들지 말라","text":"규칙 3 - private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라규칙 4 - 객체 생성을 막을 때는 private 생성자를 사용하라규칙 5 - 불필요한 객체는 만들지 말라 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 3. private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라 싱글턴은 객체를 하나만 만들 수 있는 클래스다. singleton 구현 방법public static final 상수(before JDK 1.5)public class Single &#123; public static final Single INSTANCE = new Single(); private Single() &#123; ... &#125;&#125; 문제점 리플렉션으로 private 생성자 호출 가능 생성자에서 에러날 경우 예외처리 불가능 -&gt; static 초기화 블럭으로 해결 가능 static factory 메서드(before JDK 1.5)public class Single &#123; private static final Single INSTANCE = new Single(); private Single() &#123; ... &#125; public static Single getInstance() &#123; return INSTANCE; &#125;&#125; 문제점 리플렉션으로 private 생성자 호출 가능 위 두 방법에서 직렬화가능 클래스로 만드려면 클래스 선언에 implements Serializable을 추가하는 것으로는 부족하다. 클래스 선언에 implements Serializable 추가 모든 객체 필드에 transient 선언 readResolve() 추가 private Object readResolve() &#123; // 동일한 객체가 반환되도록 하는 동시에, // 가짜 객체는 gc가 처리하도록 만든다. return INSTANCE;&#125; thread safe하려면 synchronized 적용 public static synchronized Single getInstance() &#123; ... &#125; ``` ###### Initialization on demand holder idiom- jvm 의 class loader의 매커니즘과 class의 load 시점을 이용하여 내부 class를 생성시킴으로 thread 간의 동기화 문제를 해결- lazy initialization```javapublic class Singleton &#123; private Singleton() &#123; &#125; private static class SingletonHolder &#123; public static final Singleton INSTANCE = new Singleton(); &#125; public static Singleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125;&#125; enum을 이용하는 방법(after JDK 1.5)public enum Single &#123; INSTANCE; ...&#125; 직렬화 자동으로 처리된다. 리플렉션 공격에도 안전하다. Enum 생성은 Thread-safe하지만, 내부 메서드들은 Thread-safe를 보장하지 않는다. why? 선언된 상수 이외의 다른 객체는 존재할 수 없다는 확실한 보장이 생긴다(JVM이 해주는 보장). enum 타입은 Comparable 인터페이스, Serializable 인터페이스가 구현되어 있다. 참고Link java singleton pattern (싱글톤 패턴) - https://blog.seotory.com/post/2016/03/java-singleton-pattern 게으른 홀더를 통한 싱글턴의 동시성 문제 해결 (Initialization on demand holder idiom) - http://changsuk.me/?p=1433 Thread-safe Enum Singleton - http://stackoverflow.com/questions/28369025/thread-safe-enum-singleton serializable 객체의 내용을 파일에 저장하거나 네트워크로 전송하기 위해서 스트림으로 만드는 작업(바이트 단위로 변환) Serializable 인터페이스 구현 모든 필드 또한 Serializable 인터페이스 구현 제외하고자하는 필드는 transient example public class Test &#123; public static void main(String[] args) throws IOException, ClassNotFoundException &#123; SerializerTest test = new SerializerTest(); test.serialization(); test.deserialization(); &#125;&#125;class SerializerTest &#123; private String filePath = \"/Users/yeongjun/Desktop/test.ser\"; private User user; public void serialization() throws IOException &#123; user = new User(\"yj\", 26, \"pwd\"); FileOutputStream f = new FileOutputStream(filePath); ObjectOutputStream o = new ObjectOutputStream(f); // 직렬화 클래스 o.writeObject(user); // 파라미터로 넘긴 객체를 스트림으로 만들어서 출력하는 메서드 o.close(); &#125; public void deserialization() throws IOException, ClassNotFoundException &#123; FileInputStream f = new FileInputStream(filePath); ObjectInputStream o = new ObjectInputStream(f); // 역직렬화 클래스 user = (User)o.readObject(); // 입력된 스트림으로부터 객체를 만들어서 반환하는 메서드 o.close(); System.out.println(user.toString()); &#125;&#125;class User implements Serializable &#123; private static final long serialVersionUID = 1L; // 이건 왜? private String name; private int age; private transient String password; public User(String name, int age, String password) &#123; this.name = name; this.age = age; this.password = password; &#125; @Override public String toString() &#123; return \"User&#123;name='\" + name + '\\'' + \", age=\" + age + \", password='\" + password + \"\\'&#125;\"; &#125;&#125; 규칙 4. 객체 생성을 막을 때는 private 생성자를 사용하라 생성자를 생략하면 컴파일러는 자동으로 인자없는 public 생성자를 만든다. 그러므로, 객체 생성을 막기 위해서 private 생성자를 추가한다. AssertionError()를 통해 혹시나 클래스내에서 생성자를 사용할 경우를 방지한다. public class Utils &#123; private Utils() &#123; throw new AssertionError(); &#125;&#125; cf. Code with Lombok 필드, 메서드를 static으로 변환 private 생성자 추가 @UtilityClasspublic class Utils &#123; private final int VERSION = 1; public void getVersion() &#123; return VERSION; &#125;&#125; 규칙 5. 불필요한 객체는 만들지 말라 변경 불가능(immutable) 객체는 언제나 재용사할수 있다.(규칙 15) Bad Practice 코드는 실행될 때마다 String 객체를 만드는 쓸데없는 짓을 한다. loop 도는 만큰 String 객체를 생성한다. Good Practices는 실행할 때마다 객체를 생성하지 않고, 동일한 String 객체를 사용한다. 같은 가상머신에서 실행되는 모든 코드가 해당 객체를 사용한다(JLS, 3.10.5). for(int i = 0; i &lt; 999999; i++) &#123; // Bad Practice System.out.println(new String(\"test\")); // Good Practice System.out.println(\"test\");&#125; Static Factory Method(규칙 1)를 이용하면 불필요한 객체 생성을 피할 수 있다. Boolean.valueOf(String) 변경 가능한 객체이지만 변경할 일이 없다면 재사용한다. AS-IS public class Person &#123; private final Date birthDate; public boolean isBabyBoomer() &#123; Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\")); gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0); Date boomStart = gmtCal.getTime(); gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0); Date boomEnd = gmtCal.getTime(); return birthDate.compareTo(boomStart) &gt;= 0 &amp;&amp; birthDate.compareTo(boomEnd) &lt; 0; &#125;&#125; TO-BE public class Person &#123; private final Date birthDate; private static final Date BOOM_START; private static final Date BOOM_END; static &#123; Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\")); gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0); BOOM_START = gmtCal.getTime(); gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0); BOOM_END = gmtCal.getTime(); &#125; public boolean isBabyBoomer() &#123; return birthDate.compareTo(BOOM_START) &gt;= 0 &amp;&amp; birthDate.compareTo(BOOM_END) &lt; 0; &#125;&#125; static initialzer을 하지않고 lazy initialization 기법을 사용할 수도 있다. 하지만, 추천하지 않는다. 구현이 복잡해질 뿐더러 TO-BE로 개선한 것 이상으로 성능을 높이기 어렵기 때문이다(규칙 55). 어댑터 TO-DO JDK 1.5 이후, 쓸데없는 객체 생성하는 방법 추가 - autoboxing public static void main(String[] args) &#123; Long sum = 0L; for (long i = 0; i &lt; Integer.MAX_VALUE; i++) &#123; sum += i; &#125;&#125; sum이 long이 아닌 Long으로 선언되어 있기 때문에 더해질때마다 객체가 생성된다(2^31개 생성). 객체 표현형 대신 기본 자료형을 사용하고, 생각지도 못한 자동 객체화가 발생하지 않도록 유의하라. 직접 관리하는 객체 풀을 만들어 객체 생성을 피하는 기법은 객체 생성 비용이 극단적으로 높지 않다면 사용하지 않는 것이 좋다. 독자적으로 관리되는 객체풀을 만들면, 코드의 복잡성 메모리 요구량 증가 성능 떨어짐: 사용해야할 상황 - 데이터베이스 접속 비용이 큼 라이선스 정책에 따라 연결 수가 제한될 수 있음 규칙 39는 방어적 복사defensive copy에 관한 것. // 방어적 복사 방법public Period(Date start, Date end) &#123; this.start = new Date(start.getTime()); this.end = new Date(end.getTime());&#125; 규칙 5: “재사용이 가능하다면 새로운 객체는 만들지 말라” 규칙 39: “새로운 객체를 만들어야 한다면 기존 객체는 재사용하지 말라” 방어적 복사가 요구되는 상황에서 객체를 재사용하는 것은 (쓸데없이 같은 객체를 만드는) 비용보다 훨씬 높다는 것에 유의하자. 필요할 때 방어적 복사본을 만들지 못하면 버그나 보안 결함으로 이어진다. 쓸데 없는 객체들은 고작 코드 스타일과 성능에나 영향을 줄 뿐이다.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"이펙티브자바 2장. 객체 생성과 삭제 - 1","slug":"creating-and-destroying-objects-1","date":"2017-02-10T01:00:00.000Z","updated":"2017-05-21T11:41:48.000Z","comments":true,"path":"2017/02/10/creating-and-destroying-objects-1/","link":"","permalink":"https://wickso.me/2017/02/10/creating-and-destroying-objects-1/","excerpt":"규칙 1 - 생성자 대신 static factory method 사용을 고려하자규칙 2 - 생성자의 매개변수가 많을 때는 빌더(builder)를 고려하자","text":"규칙 1 - 생성자 대신 static factory method 사용을 고려하자규칙 2 - 생성자의 매개변수가 많을 때는 빌더(builder)를 고려하자 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. 조슈아 블로크, 이병준(옮긴이), Effective Java, 2판, 인사이트, 2015. 규칙 1. 생성자 대신 static factory method 사용을 고려하자 클래스를 통해 객체를 만드는 방법 Constructor Static factory method (Design Patterns에 나오는 [팩토리 메서드 패턴][dp-factory-method]과 다르다.) Static factory method 예제 코드 public class Boolean &#123; public static final Boolean TRUE; public static final Boolean FALSE; private boolean value; static &#123; TRUE = new Boolean(true); FALSE = new Boolean(false); // Q. static 초기화 블록 vs 선언과 동시에 생성 // A. 초기화 블록은 클래스 초기화 될 떄 수행하고, 동시 생성은 언제? &#125; private Boolean(boolean b) &#123; this.value = b; &#125; private Boolean(String str) &#123; this.value = \"true\".equalsIgnoreCase(str); &#125; // Q. str.equalsIgnoreCase(\"true\") 를 안쓰는 이유 // A. str이 null이면 NullPointException 발생 // Static factory method public static Boolean valueOf(boolean b) &#123; return b ? Boolean.TRUE : Boolean.FALSE; &#125; ...&#125; boolean b = (boolean)Boolean.TRUE; // unboxingBoolean b = (Boolean)true; // boxingBoolean b = true; // auto boxingBoolean b = Boolean.valueOf(true); public으로 선언된 생성자 대신 Static factory method를 제공하는 방법의 장단점은 아래와 같다. 장점java.utils.Collections 클래스에는 Static factory method의 장점이 대부분 적용되어 있다. package java.util;public class Collections &#123; // 3-3 private Collections() &#123;&#125; // 2-2(Non-instantiable class) public static final Map EMPTY_MAP = new EmptyMap&lt;&gt;(); // 2-1, 2-2(Singleton) public static final &lt;K,V&gt; Map&lt;K,V&gt; emptyMap() &#123; // 1, 3-2, 4 return (Map&lt;K,V&gt;) EMPTY_MAP; &#125; private static class EmptyMap&lt;K,V&gt; // 3-1 extends AbstractMap&lt;K,V&gt; implements Serializable &#123; /* ... */ &#125;&#125; public interface Map&lt;K,V&gt; &#123;/* ... */&#125;public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;/* ... */&#125; // 3-3 이해하기 쉬운 이름의 메서드를 생성자로 사용할 수 있다(가독성). 클래스의 인스턴스를 생성하는데 있어서 매개변수의 타입과 갯수로 구별하는 것보단 잘 지은 이름이 더 파악하기 쉽다. 호출할 때마다 인스턴스화하지 않아도 된다. 만든 객체를 캐시cache 해놓고 재사용하여 같은 객체가 불필요하게 거듭 생성되는 일을 피할 수 있다. Boolean.value(boolean)는 이 기법을 활용한 좋은 사례로 [Flyweight 패턴][dp-flyweight]과 유사하다. 동일한 객체가 요청되는 일이 잦고, 특히 객체를 만드는 비용이 클 때 적용하면 성능을 크게 개선할 수 있다. 같은 객체를 반복해서 반환할 수 있다. 어떤 시점에 어떤 객체가 얼마나 존재할지를 정밀하게 제어할 수 있다. 그런 기능을 갖춘 클래스를 개체 통제 클래스instance-controlled class라고 부른다. 개체 통제 클래스를 작성하는 이유는 아래와 같다. Singleton pattern 적용 Non-instantiable class 생성 가능(e.g. Utility class) public class UtilityClass &#123; private UtilityClass() &#123; throw new AssertionError(); &#125;&#125; 불변 클래스 public class Complex &#123; private final double re; private final double im; private Complex(double re, double im) &#123; this.re = re; this.im = im; &#125; public static Complex valueOf(double re, double im) &#123; return new Complex(re, im); &#125;&#125; enum이 이 기법을 사용 equals() 대신 == 연산자 사용 가능 자신의 인스턴스만 반환하는 생성자와는 달리, 서브타입 객체도 반환 가능하다. “public으로 선언되지 않은 클래스의 객체를 반환하는 API를 만들 수 있다. 그러면 구현 세부사항을 감출 수 있으므로 아주 간결한 API가 가능하다.” “이 기법은 인터페이스 기반 프레임워크(interface-based framework) 구현에 적합한데, 이 프레임워크에서 인터페이스는 정적 팩터리 메서드의 반환값 자료형으로 이용된다.” “관습상 반환값 자료형이 Type이라는 이름의 인터페이스인 정적 팩터리 맥서드를 Types라는 이름의 객체 생성 불가능 클래스안에 둔다.” public interface Fruit &#123; String getName();&#125;public class Fruits &#123; private Fruits() &#123;&#125; public static Fruit getBanana() &#123; return new Banana(); &#125; public static Fruit getApple() &#123; return new Apple(); &#125; private static class Apple implements Fruit &#123; @Override public String getName() &#123; return \"apple\"; &#125; &#125; private static class Banana implements Fruit &#123; @Override public String getName() &#123; return \"banana\"; &#125; &#125;&#125; @Testpublic void main() &#123; Fruit apple = Fruits.getApple(); apple.getName();&#125; 제네릭 클래스의 인스턴스를 생성하는 코드를 간결하게 해준다. static 팩토리 메서드를 사용하면 컴파일러가 타입 추론(type inference)으로 해결할 수 있다. // beforeMap&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;String, List&lt;String&gt;&gt;();// after: 1.6 버전public static &lt;K, V&gt; HashMap&lt;K, V&gt; newInstance() &#123; return new HashMap&lt;K, V&gt;();&#125;Map&lt;String, List&lt;String&gt;&gt; m = HahsMap.newInstance();// after: 1.7// &lt;&gt;(다이아몬드) 연산자 추가Map&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;&gt;(); 단점 Static factory method만 있는 클래스는 public이나 protected로 선언된 클래스가 없으므로 하위 클래스를 만들 수 없다. public class Collections &#123; Collections() &#123;&#125;&#125;// inheritancepublic class CustomCollections extends Collections &#123; public CustomCollections() &#123; super(); // 불가능 &#125;&#125; 그러므로, Composition을 사용한다. // compositionpublic class CustomCollections &#123; private Collections collections;&#125; 상속을 사용하는 경우: is-a 관계 컴포지션을 사용하는 경우: has-a 관계 다른 Static factory method와 쉽게 구별할 수 없다. API 문서에 메서드와 생성자가 분리되어 있지만, static 팩토리 메서드는 다른 메서드와 섞여 잘 구분되지 않는다. 그래서 컨벤션을 정하여 보다 구별하기 쉽게 한다. valueOf: 자신의 매개변수와 같은 값을 갖는 인스턴스를 반환 of: valueOf 줄인 형태, EnumSet에서 사용 getInstance: 매개변수에 맞는 인스턴스 반환, 싱글톤인 경우 하나의 인스턴스 반환 newInstance: 새로운 인스턴스 반환 getType: getInstance와 유사하나 팩토리 메서드가 다른 클래스에 있을 때 사용. 여기서 Type은 팩토리 메서드에서 반환되는 객체의 타입을 나타낸다. newType: getType와 같음(?) 규칙 2. 생성자의 매개변수가 많을 때는 빌더(builder)를 고려하자선택적 인자가 많을 때 객체를 생성하는 방법 세 가지. 방법 1) 점층적 생성자 패턴(telescoping constructor pattern) Bad Practice 👎 이 방법은 필수 인자만 받는 생성자를 하나 정의하고, 선택적 인자를 받는 생성자를 추가하는 것이다. 객체를 생성할 때는 설정하려는 인자 갯수에 맞는 생성자를 골라 호출한다. 문제점 설정할 필요가 없는 필드에도 인자를 전달해야 해야 한다. 인자 수가 늘어날수록 가독성이 떨어진다. Code public class Person &#123; private final String name; // 필수 private final int age; // 필수 private final String mail; private final String city; private final String state; public Person(String name, int age) &#123; this(name, age, \"\"); &#125; public Person(String name, int age, String mail) &#123; this(name, age, mail, \"\"); &#125; public Person(String name, int age, String mail, String city) &#123; this(name, age, mail, city, \"\"); &#125; public Person(String name, int age, String mail, String city, String state) &#123; this.name = name; this.age = age; this.mail = mail; this.city = city; this.state = state; &#125;&#125; Usage Person me = new Person(\"yeongjun.kim\", \"27\");Person me = new Person(\"yeongjun.kim\", \"27\", \"opid911@gmail.com\"); 방법 2) JavaBeans 패턴 Bad Practice 👎 인자 없는 생성자를 호출하여 객체를 만들고, setter로 값 설정하는 방법. 객체 생성도 쉽고, 가독성도 좋다. 문제점 1회의 함수 호출로 객체 생성을 끝낼 수 없으므로, 객체 일관성이 일시작으로 깨질 수 있다. 변경 불가능 클래스를 만들 수 없다. 해결하기 위해서 추가 구현할 코드가 많아진다. Code @Setterpublic class Person &#123; private String name; private int age; private String mail; private String city; private String state; public Person() &#123;&#125;&#125; Usage Person me = new Person();me.setName(\"yeongjun.kim\");me.setAge(27); 방법 3) Builder 패턴[↩︎][dp-builder] Good Practice 👍 필수 인자들을 생성자(또는 정적 팩터리 메서드)에 전달하여 빌더 객체를 만들고, 선택적 인자들을 추가한 뒤, 마지막에 build()를 호출하여 Immutable 객체를 만드는 방법. Code public class Person &#123; private final String name; private final int age; private final String mail; private final String city; private final String state; // 빌더 객체 public static class Builder &#123; // 필수 인자 private final String name; private final String age; // 선택적 인자 - 기본값으로 초기화 private final String mail = \"\"; private final String city = \"\"; private final String state = \"\"; public Builder(String of, int age) &#123; this.name = name; this.age = age; &#125; public Builder mail(String mail) &#123; this.mail = mail; return this; &#125; public Builder city(String city) &#123; this.city = city; return this; &#125; public Builder state(String state) &#123; this.state = state; return this; &#125; public Person build() &#123; return new Person(this); &#125; &#125; private Person(Builder builder) &#123; this.name = name; this.age = age; this.mail = mail; this.city = city; this.state = state; &#125;&#125; Usage Person me = Person.Builder(\"yeongjun.kim\", 27) .mail(\"opid911@gmail.com\") .build(); 빌더 클래스(Builder)는 빌더가 만드는 객체 클래스(Person)의 정적 맴버 클래스로 정의한다(규칙 22). public class Person &#123; public static class Builder &#123; ... &#125;&#125; 불변식을 적용할 수 있으며, build()에서 불변식이 위반되었는지 검사할 수 있다. public class Person &#123; public static class Builder &#123; ... public Person build() &#123; Person result = new Person(this); if(/* result의 값 검사 */) &#123; throw new IllegalStateException(/* 위반 원인 */); &#125; return result; &#125; &#125;&#125; 빌더 객체에서 실제 객체로 인자가 복사된 다음에 불변식들을 검사할 수 있다는 것, 그리고 그 불변식을 빌더 객체의 필드가 아니라 실제 객체의 필드를 두고 검사할 수 있다는 것은 중요하다(규칙 39). 불변식을 위반한 경우, build()는 IllegalStateException을 던져야 한다(규칙 60). 예외 객체를 살펴보면 어떤 불변식을 위반했는지 알아낼 수도 있어야 한다(규칙 63). cf. 불변식을 강제하는 방법 불변식이 적용될 값 전부를 인자로 받는 setter를 정의하는 방법. setter는 불변식이 만족하지 않으면 IllegalArgumentException을 던짐. build()가 호출되기 전에 불변식을 깨뜨리는 인자가 전달되었다는 것을 신속하게 알 수 있는 장점. public class Person &#123; ... public static class Builder &#123; public Builder setNameAndAge(String name, int ate) &#123; if(name == null) &#123; throw new IllegalArgumentException(); &#125; return this; &#125; ... public Person build() &#123; return new Person(this); &#125; &#125; ...&#125; 메서드마다 하나씩, 필요한 만큼 varargs 인자를 받을 수 있다. public class Person &#123; public static class Builder &#123; public Builder names(String... names) &#123; this.names = names; return this; &#125; public Builder foramily(String... names) &#123; this.farther = names[0]; this.marther = names[1]; return this; &#125; &#125; ...&#125; 유연하다. (e.g. 객체가 만들어질 때마다 자동적으로 증가하는 일련번호 같은 것을 채울 수 있다) 인자가 설정된 빌더는 훌륭한 [Abstract Factory][dp-abstract-factory]다. JDK1.5 이상을 사용하는 경우, 제네릭 자료형 하나면 어떤 자료형의 객체를 만드는 빌더냐의 관계 없이 모든 빌더에 적용할 수 있다. public interface Builder&lt;T&gt; &#123; public T build();&#125; public class Person &#123; public static class Builder implements Builder&lt;Person&gt; &#123; ... public Person build() &#123; return new Person(this); &#125; &#125;&#125; e.g. Code at package java.util.stream Stream.builder().add(1).add(2).add(3).build(); 빌더 객체를 인자로 받는 메서드는 보통 한정적 와일드카드 자료형bounded wildcard type을 통해 인자의 자료형을 제한한다(규칙 28). Tree buildTree(Builder&lt;? extends Node&gt; nodeBuilder) &#123;...&#125; 자바가 제공하는 추상적 팩토리로는 Class 객체가 있으며, 이 객체의 newInstance() 가 build 메서드 구실을 한다. 하지만, newInstance()는 항상 무인자 생성자를 호출하려 하는데, 문제는 그런 생성자가 없을 수도 있다는 것. TO-DO 문제점 빌더 객체를 만드는 오버헤드가 문제가 될 수 있다(성능이 중요한 상황). 그러니 인자 갯수가 통제할 수 없을 정도로 많아지만 빌더 패턴을 적용하자. 요약빌더 패턴은 인자가 많은 생성자나 정적 팩터리가 필요한 클래스를 설계할 때, 특시 대부분의 인자가 선택적 인자인 상황에 유용하다. cf. Code with Lombok - 정적 팩터리 메서드로 구현 @Value // immutable(private, final 적용)@Builderpublic class Person &#123; String name; int age; String mail; String city; String state;&#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"effective java","slug":"effective-java","permalink":"https://wickso.me/tags/effective-java/"}]},{"title":"Factory Method Pattern","slug":"factory-method-pattern","date":"2017-02-10T01:00:00.000Z","updated":"2017-05-21T11:45:45.000Z","comments":true,"path":"2017/02/10/factory-method-pattern/","link":"","permalink":"https://wickso.me/2017/02/10/factory-method-pattern/","excerpt":"의도객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다. Factory Method라는 패턴 이름이 적절하지 못한데, 이름으로 인해 객체를 생성하는 메소드를 Factory method라 오해하는 개발자가 많이 있다(Allen Holub의 말을 인용.) 이런 생성 메소드가 모두 Factory method 패턴을 사용하는 것은 아니다. Template Method의 생성 패턴 버전으로 볼 수 있는데 Template Method를 알지 못한다면 그 패턴을 먼저 이해하는 것이 Factory Method를 이해하기 수월할 것이다. 위키백과팩토리 메서드 패턴 구조 활용성 어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때 생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때 객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때","text":"의도객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다. Factory Method라는 패턴 이름이 적절하지 못한데, 이름으로 인해 객체를 생성하는 메소드를 Factory method라 오해하는 개발자가 많이 있다(Allen Holub의 말을 인용.) 이런 생성 메소드가 모두 Factory method 패턴을 사용하는 것은 아니다. Template Method의 생성 패턴 버전으로 볼 수 있는데 Template Method를 알지 못한다면 그 패턴을 먼저 이해하는 것이 Factory Method를 이해하기 수월할 것이다. 위키백과팩토리 메서드 패턴 구조 활용성 어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때 생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때 객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때 예제예를 들어 다양한 종류의 문서를 표현하는 응용프로그램 프레임워크가 있다. 이를 위해서는 일단 두 개의 큰 추상화가 필요하다. 하나는 Creator(응용프로그램) 추상 클래스이고, 다른 하나는 Product(문서) 추상 클래스(혹은 인터페이스)이다.Creator 클래스는 문서의 인스턴스를 ++언제++ 만들지는 알지만, ++어떤 문서++를 만들어야 하는지는 알지 못한다. Product 클래스가 추상 클래스이기 때문에 인스턴스를 가질 수 없기 때문이다. abstract class Creator &#123; public Product newProduct() &#123; return createProduct(); &#125; public abstract Product createProduct(); // factory method&#125;interface Product &#123;&#125; 팩토리 메서드 패턴은 이런 문제에 대한 해법을 제시한다. Document의 서브클래스 중 어느 것을 생성해야 하는지에 대한 정보를 캡슐화하고, 그것을 프레임워크에서 떼어낸다. public class TextProduct implements Product &#123;&#125;public class PhotoProduct implements Product &#123;&#125; TextProduct 클래스와 PhotoProduct 클래스를 팩토리 메서드 패턴을 활용하여 생성한다면 아래와 같은 방법이 있다. 방법 1) 추상 클래스사용자는 특정 응용프로그램에 종속적인 구현을 위해서 두 클래스의 서브 클래스를 정의할 수 있다. Creator 클래스는 Product 객체를 관리하는 책임을 맡고 있으며, 필요에 따라 문서를 생성할 수도 있다. // factory pattern example with abstract classCreator textCreator = new TextCreator();Product p1 = textCreator.newProduct();Creator photoCreator = new PhotoCreator();Product p2 = photoCreator.newProduct(); public class TextCreator extends Creator &#123; @Override public Product createProduct() &#123; return new WordProduct(); &#125;&#125;public class PhotoCreator extends Creator &#123; @Override public Product createProduct() &#123; return new PhotoProduct(); &#125;&#125; public class TextProduct implements Product &#123;&#125;public class PhotoProduct implements Product &#123;&#125; 방법 2) 팩토리 메서드 매개변수화 - abstract factory pattern팩토리 메서드가 매개변수를 받아서 어떤 종류의 제품을 생성할지 만드는 방법도 있다. (추상 팩토리 패턴은 팩토리 메서드를 이용해서 구현할 때가 많다) // Factory pattern example using argumentProduct p1 = Creator1.create(ProductType.TEXT);Product p2 = Creator1.create(ProductType.PHOTO); public enum ProductType &#123; TEXT, PHOTO&#125; public class Creator &#123; static public Product create(ProductType type) &#123; switch (type) &#123; case TEXT: return new ExcelProduct(); case PHOTO: return new ImageProduct(); default: return null; &#125; &#125;&#125; 방법 3) Lazy Initialization 기법인스턴스화하는 접근자 메서드를 통해서만 인스턴스에 접근하는 방법으로, 생성자에서 아무 의미 없는 값으로 인스턴스에 대한 매개변수를 초기화하고, 접근자 메서드가 인스턴스를 반환하도록 할 수 있다. 생성자가 초기화 시키는 것이 아니라 필요한 시점에서 초기화를 수행하기 때문에 이런 기법을 Lazy Initialization이라고 한다. // factory pattern with lazy initializationTextCreator textCreator = new TextCreator();List collection = textCreator.newCollection(); public class TextCreator extends Creator &#123; @Override protected List createCollection() &#123; return new ArrayList&lt;TextProduct&gt;(); &#125;&#125; public abstract class Creator &#123; private List&lt;Product&gt; collection = null; public List newCollection() &#123; // lazy initialization if (collection == null) &#123; collection = createCollection(); &#125; return collection; &#125; // factory method abstract protected List createCollection();&#125; 방법 4) 템플릿 활용팩토리 메서드를 사용하면 생길 수 있는 문제점 중 하나는 Product 클래스 하나를 추가하려 할 때마다 Creator 클래스를 서브클래싱해야 한다는 점이다(방법 1). 이로써 클래스 계통의 부피가 확장되는 문제가 생길 수 있다. 이런 문제를 해결할 수 있는 방법 중 하나는 Creator 클래스를 상속받는 제네릭 클래스를 정의하고 Product 클래스로 매개변수화되도록 만드는 것이다. // factory pattern example whti templateStandardCreator&lt;WordProduct&gt; wordProductCreator = new StandardCreator&lt;&gt;(WordProduct.class);Product p1 = wordProductCreator.newProduct();StandardCreator&lt;ImageProduct&gt; imageProductCreator = new StandardCreator&lt;&gt;(ImageProduct.class);Product p2 = imageProductCreator.newProduct(); /** * Creator Template * @param &lt;T&gt; product type */public class StandardCreator&lt;T extends Product&gt; extends Creator &#123; private Class&lt;T&gt; cls; public StandardCreator(Class&lt;T&gt; cls) &#123; this.cls = cls; &#125; @Override public Product createProduct() &#123; T product = null; try &#123; product = cls.newInstance(); &#125; catch (InstantiationException | IllegalAccessException e) &#123; e.printStackTrace(); &#125; return product; &#125;&#125; 아래 책를 참고하여 학습한 내용을 정리/기록한 포스트입니다. 자세한 내용은 책을 참고하시기 바라며, 문제가 있을 경우 연락 부탁드립니다. [GOF{kr}:156] - 팩토리 메서드 GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015.","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"design pattern","slug":"design-pattern","permalink":"https://wickso.me/tags/design-pattern/"},{"name":"creational pattern","slug":"creational-pattern","permalink":"https://wickso.me/tags/creational-pattern/"}]},{"title":"Java Generic","slug":"generic","date":"2016-04-12T07:40:01.000Z","updated":"2017-05-03T07:57:06.000Z","comments":true,"path":"2016/04/12/generic/","link":"","permalink":"https://wickso.me/2016/04/12/generic/","excerpt":"","text":"제네릭 프로그래밍 generic class, method// class public class Entry&lt;K, V&gt; { private K key; private V value; ... } Entry&lt;String, Integer&gt; entry = new Entry&lt;&gt;(...); // method public class Arrays { public &lt;T&gt; void swap(T[] array, int i, int j) { T tmp = array[i]; array[i] = array[j]; array[j] = tmp; } } – generic methodpublic static &lt;T&gt; void swap(T[] array, int i, int j) 타입 파라미터를 제어자와 반환타입 사이에 둔다 호출할 때는 명시하지 않아도 가능 컴파일러가 타입파라미터 추론 Arrays.&lt;String&gt;swap(friends, 0, 1); 원한다면 명시적으로 가능 문제 발생시 더 자세한 오류 메시지 – E? T? ?? E : Element T : Type V : Value K : Key ? : 와일드 카드 … – 기본 타입은 불가능Entry&lt;String, int&gt; // 불가능 타입 경계제네릭 클래스/메서드가 받는 타입 파라미터의 타입을 제한할 때 public status &lt;T extends AutoCloseable&gt; void closeAll(ArrayList&lt;T&gt; elems) { for (T elem : elems) { elem.close(); } } 다중 경계 지정 T extends Runable &amp; AutoCloseable – &lt;T extends AutoCloseable&gt; 요소타입이 AutoCloseable의 서브타입임을 보장한다. extends == 서브타입, 상속 X 기존에 사용하던 extends 키워드를 사용함 타입 가변성과 와일드카드 Employee의 서브클래스 객체로 구성된 배열을 사용하고자 할 때, public static void process(Employee[] staff) &#123;...&#125; 이때, Manager[]이 Employee[]의 서브타입이라면 process()에 전달할 수 있다. 이러한 동작을 공변성(covariance)라고 한다. 즉, 배열은 요소 타입과 같은 방식으로 변한다. 자바에서는 와일드카드로 메서드의 파라미터와 반환 타입이 변하는 방식을 지정. 이 메커니즘을 use-site variance(사용처 공변성)이라고 한다. – covarianceManager[] bosses1 = new Manager[10]; Employee[] empls1 = bosses1; // 공변성 empls1[0] = new Manager(); // p.169 // 런타임에서 ArrayStoreException을 던질 때 잡을 수 파악 자바의 모든 제네릭 타입은 불변(invariant) – But!ArrayList&lt;Manager&gt; bosses2 = new ArrayList&lt;&gt;(); ArrayList&lt;Employee&gt; empls2 = bosses2; // error 자바의 모든 제네릭 타입은 불변(invariant) ArrayList은 ArrayList의 서브타입이 아니다. – 서브타입 와일드카드 &lt;? extends Employee&gt; public statis void pringNames(ArrayList&lt;? extends Employee&gt; staff) &#123; for(Employee e : staff) &#123; System.out.println(e.getName()); &#125;&#125; ?는 Employee의 서브타입 – But!!Employee e = staff.get(0); // 가능 staff.add(new Manager(&quot;yj&quot;)); // 불가능, 컴파일 에러 ?는 어떤 서브클래스든 가르킬 수 있으므로 컴파일 오류 즉, ? extends Employee는 Employee로 변환할 수 있지만 어떤 것도 절대 ? extends Employee로 변환할 수 없다. ArrayList&lt;? extends Employee&gt;에서 읽을 수는 있지만 쓸 수는 없다. – 슈퍼타입 와일드카드 ? super Employee 함수형 객체의 파라미터로 유용 public interface Pridicate&lt;T&gt; &#123; boolean test(T arg); ...&#125; p.247 다시 볼것 super vs extends – 슈퍼타입 와일드카드 2PECS(Producer Extends Consumer Super)와일드카드와 관련해 PECS라는 약칭을 사용하기도 한다. 생산자에는 extends, 소비자에는 super를 사용한다는 의미이다. public void pushAll(Iterable&lt;? extends E&gt; src) { for (E e : src) { push(e); } } public void popAll(Collection&lt;? super E&gt; dst) { while(!isEmpty()) { dst.add(pop()); } } 예를 들어, Stack의 경우에 pushAll()의 src는 Stack에서 사용될 E 인스턴스를 생산하므로 extends, popAll()의 dst는 Stack으로부터 E 인스턴스를 소비하므로 super가 적합하다. (이펙티브자바 항목 28) – 타입 변수와 함께 사용하는 와일드카드 p.249 공부할 곳 – 경계 없는 와일드카드public static boolean hasNulls(ArrayList&lt;?&gt; elems) { for(Object e : elems) { if (e == null) return true; } return false; } 파라미터(ArrayList)의 타입 파라미터(?)가 중요하지 않을 때 제네릭 메서드보다 ArrayList&lt;?&gt;를 사용하는 것이 타당 – 와일드카드 캡처public static void swap(ArrayList&lt;?&gt; elems, int i, int j) { ? temp = elems.get(i); elems.set(i, elems.get(j)); elems.set(j, temp); } ?을 타입으로 사용할 수 없다. – 정상적인 코드public static void swap(ArrayList&lt;?&gt; elems, int i, int j) { swapHelper(elems, i, j); } private static &lt;T&gt; void swapHelper(ArrayList&lt;T&gt; elems, int i, int j) { T temp = elems.get(i); elems.set(i, elems.get(j)); elems.set(j, temp); } – why? 와일드카드 캡처라는 규칙 덕분에 가능 컴파일러는 ?를 모르지만, ?는 어떤 타입을 나타내므로 제네릭 메서드를 호출해도 된다. swapHelper 메서드의 타입파라미터 T는 와일드카드 타입을 캡처한다. API 사용자가 T보다 ?를 이해하는것이 쉽다. 자바 가상 머신에서의 제네릭 제네릭이 없던 시절에는 Object 타입으로 받았다. 이후 설계자들은 VM에서 타입을 지우는 구현 방식으로 기존 버전 클래스와 호환되게 했다. 그리고 점진적으로 제네릭으로 옮겨갔다. – 1. 타입소거제네릭을 정의하면 해당 타입은 raw 타입으로 컴파일된다. public class Entry { private Object key; private Object value; public Entry(Object key, Object value) { this.key = key; this.value = value; } ... } – 경계가 있는 타입변수의 경우첫 번째 경계로 교체된다. public class Entry&lt;K extends Comparable&lt;? super K&gt; &amp; Serializable, V extends Serializable&gt; 다음과 같이 교체 public class Entry{ private Comparable key; private Serializable value; ... – 2. 타입 변환 연산자 삽입 Entry의 객체로 생성할 경우 반드시 String, Integer가 전달되야 한다. 그렇지 않으면 컴파일 X 즉, getKey()는 String을 반환한다는 것을 보장받는다.(컴파일이 안되므로) – 2.1 타입 변환 연산자 삽입 타입 연산자(T), 제네릭, raw(Object)를 사용하여 컴파일된 경우(비검사 경고옵션으로) 다른 값이 들어갈 수 있다. 따라서 실행 시간에 안전성 검사를 해야 한다. Entry&lt;String, Integer&gt; entry = ...String key = entry.getKey(); 타입이 소거된 getKey()는 Object를 반환하므로 컴파일러는 다음과 같은 코드를 만들어낸다. String key = (String) entry.getKey(); – 3. bridge method 메서드 파라미터와 반환 타입을 소거할 때 때때로 컴파일러가 브릿지 메서드를 만들어내야 한다. 컴파일러가 raw로 만들었기 때문에 bridge method 생성 – examplepublic class WordList extends ArrayList&lt;String&gt; { public void add(String e) { return isBadWord(e) ? false : super.add(e); } ... } ... WordList words = ... ArrayList&lt;String&gt; strs = words; strs.add(&quot;JAVA&quot;); strs.add()에서 타입소거된 ArrayList의 add(Object)를 호출한다. WordList 객체의 add를 호춣하면 동적 메서드 조회가 일어나고, ArrayList가 아닌 WordList의 add가 호출될 것을 예상할 수 있다. – example 컴파일러는 예상대로 동작하게 하려고 WordList 안에 bridge method를 만든다. public class WordList extends ArrayList&lt;String&gt; &#123; public void add(String e) &#123; return isBasWord(e) ? false : super.add(e); &#125; // bridge method public void add(Object e) &#123; add((String) e); &#125; ...&#125; add(Object)가 호출되고 WordList의 add(String)가 호출된다. – bridge method 컴파일러는 동적 메서드 조회가 일어나게 하려고 브릿지 메서드를 만들어낸다. 자바에서는 이러한 메서드 쌍을 구현할 수 없다.(?) 파라미터 타입이 다르면 오버로딩으로 가능한데 why? String get(int), Object get(int)의 형태로도 bridge method 생성! 가상 머신에서는 메서드를 이름, 파라미터 타입, 반환 타입으로 명시하므로 컴파일러가 이 메서드 쌍을 만들어낼 수 있다. – Note 제네릭 외에 공변 반환 타입(covariant return type)을 구현하는데도 이용 public class Employee implements Cloneable &#123; public Employee clone() throws CloneNotSupportedException &#123; ... &#125;&#125;Employee clone()Object clone() // bridge method 제네릭의 제약 기본 타입 인자가 없다 실행 시간에는 모든 타입이 raw 형태다 타입 변수의 인스턴스를 만들 수 없다 파라미터화된 타입의 배열을 생성할 수 없다 정적 컨텍스트에서는 클래스 타입 변수가 유효하지 않다 메서드가 소거 후 충동하지 않을 수도 있다 예외와 제네릭 실행 시간에는 모든 타입이 raw 형태다VM에는 오직 raw type만 있다. 그래서 실행시간에 ArrayList가 String 객체를 담고 있는지 알아낼 수 없다. 이와 같은 조건은 절대로 검사할 수 없으므로 compile-time error를 일으킨다 – 실행 시간에는 모든 타입이 raw 형태다아래 코드는 비효율적이지만 합법적인 방법이다. obj가 ArrayList인지만 검사한다. Object obj = ...; ArrayList&lt;String&gt; list = (ArrayList&lt;String&gt;) obj; 경고창을 사라지게 하려면 변수앞에 어노테이션을 붙여야 한다. @SuppressWarnings(&quot;unchecked&quot;) ArrayList&lt;String&gt; list = (ArrayList&lt;String&gt;) obj; – but!caution @SuppressWarnings 어노테이션을 잘못 사용하면 heap pollution으로 이어질 수 있다. heap pollution이란 객체가 특정 제네릭 타입 인스턴스에 속해야 하지만 실제로는 다른 인스턴스에 속하는 현상을 말한다. ArrayList에 ArrayList을 할당할 수 있지만, 부적합한 타입 요소를 추출하면 당연히 ClassCastException이 일어난다. – but!tip 힙 펄루션의 문제점은 보고된 실행 시간 오류가 문제의 원인(부적합한 요소의 삽입)과 상당히 다르다는 점이다(문제의 원인은 인스턴스에 다른 값을 넣은 것인데 ClassCate가 발생하는 점). 이런 문제를 디버그하려면 checked view를 사용해야 한다. List&lt;String&gt; strings = Collections.checkedList(new ArrayList&lt;&gt;, String.class); 이 검사 뷰는 해당 리스트에 삽입하는 동작을 모두 검사해서 부적합한 타입 객체를 추가하는 순간 예외를 던진다. – 실행 시간에는 모든 타입이 raw 형태다getClass 메서드는 항상 raw 타입을 반환한다. ArrayList&lt;String&gt; list = ...; list.getClass(); // ArrayList.class ArrayList&lt;String&gt;/classl // 없는 클래스이므로 문법오류 발생 – 타입 변수의 인스턴스를 만들 수 없다.해결하려면 호출하는 쪽에서 배열 생성자를 메서드 참조로 제공하게 해야 한다. // obj가 n개 들어간 배열을 만든다고 가정할때 String[] arr = Arrays.repeat(10, &quot;hi&quot;, String[]::new); public static &lt;T&gt; T[] repeat(int i, T obj, IntFunction&lt;T[]&gt; constr) { T[] result = constr.apply(n); for (int i=0; i &lt; n; i++) result[i] = obj; return result; } String[] arr = Arrays.repeat(10, &quot;hi&quot;, String.class); // 리플렉션 public static &lt;T&gt; T[] repeat(int n, T obj, Class&lt;T&gt; cl) { @SuppressWarnings(&quot;unchecked&quot;) T[] result = (T[]) java.lang.reflect.Array.newInstance(cl, n); for (int i=0; i &lt; n; i++) result[i] = obj; return result; } – 타입 변수의 인스턴스를 만들 수 없다.또 다른 방법으로 호출하는 쪽에서 배열을 할당하게 하는 방법 String[] arr = Arrays.repeat(10, &quot;hi&quot;, new String[5]); public static &lt;T&gt; T[] repeat(int i, T obj, T[] array) { T[] result; if(array.length &gt;= n) { result = array; } else { @SuppressWarnings(&quot;unchecked&quot;) T[] newArray = (T[]) java.lang.reflect.Array.newInstance( array.getClass().getComponenetType(), n); result = newArray; } for (int i=0; i &lt; n; i++) result[i] = obj; return result; } – tip타입 변수를 이용하여 ArrayList는 생성가능하니, 마땅히 배열을 사용해야하는 이유가 없다면 ArrayList방법을 권장한다. public static &lt;T&gt; ArrayList&lt;T&gt; repeat(int n, T obj) { ArrayList&lt;T&gt; result = new ArrayList&lt;&gt;(); for(int i = 0; i &lt; n; i++) result.add(obj); return result; } – 파라미터화된 타입의 배열을 생성할 수 없다.// 오류 - 제네릭 컴포넌트 타입으로 구성된 배열은 생성할 수 없다. Entry&lt;String, Integer&gt;[] entries = new Entry&lt;String, Integer&gt;[100]; // 해결방안 @SuppressWarnings(&quot;unchecked&quot;) Entry&lt;String, Integer&gt;[] entries = (Entry&lt;String, Integer&gt;[]) new Entry&lt;?, ?&gt;[100]; // 더 나은 방안 - ArrayList 사용 ArrayList&lt;Entry&lt;String, Integer&gt;&gt; entries = new ArrayList&lt;&gt;(100); – 파라미터화된 타입의 배열을 생성할 수 없다.public static &lt;T&gt; ArrayList&lt;T&gt; asList(T... elements) { ArrayList&lt;T&gt; result = new ArrayList&lt;&gt;(); for(T e : elements) { result.add(e); } return result; } ... Entry&lt;String, Integer&gt; e1 = ...; Entry&lt;String, Integer&gt; e2 = ...; ArrayList&lt;Entry&lt;String, Integer&gt;&gt; entries = Lists.asList(e1, e2); // 컴파일러가 경고, 오류X @SafeVarargs public static &lt;T&gt; ArrayList&lt;T&gt; asList(T... elements) { ... – 정적 컨텍스트에서는 클래스 타입 변수가 유효하지 않다.public class Entry&lt;K, V&gt; { private static V defaultValue; // 오류 public static void setDefault(V value) { ... } // 오류 ... } 타입 소거는 소거된 Entry 클래스에 이런 종류의 변수나 메서드가 K와 V별로 있는 것이 아니라 오직 한 개만 있다는 것을 알 수 있다. == 타입 소거가 되면 Entry 클래스에는 Object로 모두 바뀌어서 구분할 수 없이 Object 한 개만 있다는 것이다? – 메서드가 소거 후 충돌하지 않을 수도 있다.타입 소거 후 충돌을 일으킬 수 있는 메서드는 선언하지 않아야 한다. 다음 코드는 타입 소거후 Object의 equals과 충돌한다. public interface Ordered&lt;T&gt; extends Comparable&lt;T&gt; { public default boolean equals(T value) { return compareTo(value) == 0; } ... } – 메서드가 소거 후 충돌하지 않을 수도 있다. 2충돌의 원인이 미묘할 때 public class Employee implements Comparable&lt;Employee&gt; { ... public int compareTo(Employee other) { return name.compareTo(other.name); } } public class Manager extends Employee implements Comparable&lt;Manager&gt; { // 오류 - 두 Comparable 인스턴스를 슈퍼타입으로 둘 수 없다. ... public int compareTo(Manager other) { return Double.compare(salary, other.salary); } } 여기서는 소거가 일어나지 않는다. 두 compareTo의 브릿지 메서드가 충돌한다.// ?. 제목이랑 내용이랑 무슨 말인지..? – 예외와 제네릭제네릭 클래스의 객체는 예외로 던지거나 잡아낼 수 없다. Throwable의 제네릭 서브클래스조차 만들 수 없다. public class Problem&lt;T&gt; extends Exception { // 제네릭 틀래스는 Throwable의 서브타입이 될 수 없다. } catch 절에서도 타입 변수를 사용할 수 없다. ... try { r.run(); } catch(T ex) { Logger.get.... } – butthrows 선언에는 타입 변수를 사용할 수 있다. public static &lt;V, T extends Throwable&gt; V doWork(Callable&lt;V&gt; c, T ex) throws T { try { return c.call(); } catch (Throwable realEx) { ex.initCause(realEx); throw ex; } } 리플렉션과 제네릭– Class 클래스Class 클래스는 Class 객체가 기술하는 클래스를 타입 파라미터로 받는다. String.class 는 타입이 Class이다. 그러므로, Class의 newInstance 메서드는 String을 반환한다.이 정보 덕분에 타입 변환 연산자를 사용하지 않아도된다. – 가상 머신에서 제네릭 타입 정보제네릭 클래스와 제네릭 메서드의 선언부가 지워지지 않으므로 리플렉션으로 접근할 수 있다. – 가상 머신에서 제네릭 타입 정보 2java.lang.reflect 패키지의 Type 인터페이스는 제네릭 타입 선언을 나타낸다. Type 인터페이스의 서브타입은 다음과 같다. 구체적인 타입을 기술하는 Class 클래스 (T extends Comparable&lt;? super T&gt; 같은) 타입 변수를 나타내는 TypeVariable 인터페이스 (? super T 같은) 와일드카드를 나타내는 WildcardType 인터페이스 (Comparable&lt;? super T&gt; 같은) 제네릭 클래스나 인터페이스를 나타내는 ParameterizedType 인터페이스 (T[] 같은) 제네릭 배열을 나타내는 GenericArrayType 인터페이스 – 가상 머신에서 제네릭 타입 정보 3Class, Method, Constructor 객체가 제네릭 선언에서 나온 것인지 알아내려면 getTypeParameters 메서드를 호출한다. 반환값으로 TypeVariable 인스턴스 배열을 얻으며 각 요소는 선언부에 있는 타입 변수를 나타낸다. 길이가 0이라면 제네릭 선언이 아니다. Method m = Collections.class.getMethod(&quot;sort&quot;, List.class); TypeVariable&lt;Method&gt;[] vars = m.getTypeParameters(); String name = vars[0].getName(); System.out.println(name); // &quot;T&quot;","categories":[{"name":"slide","slug":"slide","permalink":"https://wickso.me/categories/slide/"}],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"}]},{"title":"spring study 01","slug":"spring-01","date":"2016-04-06T17:32:16.000Z","updated":"2017-05-03T07:45:24.000Z","comments":true,"path":"2016/04/07/spring-01/","link":"","permalink":"https://wickso.me/2016/04/07/spring-01/","excerpt":"","text":"Spring in Action chapter 1 스프링 속으로 @date 2016.04.07—## readmeSpring in Action 으로 공부하면서 어려웠던 부분, 기억해야 할 것같은 부분 위주로 정리한 ppt이다. 상단 제목의 번호는 필요할 때 책을 참고하고자 동일하게 적어두었다.—## 1.1 자바 개발 간소화자바 복잡도 간소화를 지원하기 위한 주요 전략1. POJO를 이용한 가볍고(lightweight) 비침투적(non-invasive)인 개발2. DI와 인터페이스 지향(interface orientation)을 통한 느슨한 결합도(loose coupling)3. 애스펙트와 공통 규약을 통한 선언적(declarative) 프로그래밍4. 애스팩트와 템플릿(template)을 통한 반복적인 코드 제거비침투적 개발이란, 바탕이 되는 기술을 사용하는 클래스, 인터페이스, API 등을 코드에 직접 나타내지 않는 방법으로 복잡함을 분리할 수 있다.–## 1.1.2 종속객체 주입- 종속객체 주입(DI, Dependency Injection)- 객체는 종속객체를 생성하거나 얻지 않는다. 즉, 종속객체는 종속객체가 필요한 객체에 주입된다.–### 1.1.2-1생성자 주입(constructor injection) public class BraveKnight implements Knight { private Quest quest; public BraveKnight(Quest quest) { // Quest 주입 this.quest = quest; } public void embarkOnQuest() { quest.embark(); } }–### 1.1.2-2BraveNight 테스트 public class BraveKnightTest { @Test public void knightShouldEmbarkOnQuest() { Quest mockQuest = mock(Quest.class); // 모의 Quest 생성 BraveKnight knight = new BraveKnight(mockQuest); // 모의 Quest 주입 knight.embarkOnQuest(); verify(mockQuest, time(1)).embark(); } }강한 결합으로 생성자 안에서 quest를 생성할 때는 테스트가 불가능 했지만 DI를 이용하고 테스트가 가능하다. embarkOnQuest()를 호출한 후에 Mockito에게 Quest의 embark()가 정확히 한 번 호출됐는지 확인한다.–### 1.1.2-3 public class SlayDragonQuest implements Quest { private PrintStream stream; public SlayDragonQuest(PrintStream stream) { this.stream = stream; } public void embark() { stream.println(“Embarking on quest to slay the dragon!”); } }위와 같은 클래스가 있을 때, 어떻게 BraveKnight에게 SlayDragonQuest를 줄 수 있는가? 그리고 어떻게 SlayDragonQuest에게 PrintStrean을 줄 수 있는가?–### 1.1.2-4와이어링(wiring): 애플리케이션 컴포넌트 간의 관계를 정의하는 것(xml or java를 이용한 방법)xml &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; –### 1.1.2-5java @Configuration public class KnightConfig { @Bean public Knight knight() { return new BraveKnight(quest()); } @Bean public Quest quest() { return new SlayDragonQuest(System.out); } }–### 1.1.2-6실행해 보기application context은 빈에 관한 정의들을 바탕으로 빈들을 엮어 준다. 스프링 애플리케이션 컨텍스트는 애플리케이션을 구성하는 객체의 생성과 와이어링을 전적으로 책임진다.xml: ClassPathXmlApplicationContext()java: AnnotationConfigApplicationContext() public static void main(String[] args) { ClassPathXmlApplicationContext context = // 스프링 컨텍스트 로드 new ClassPathXmlApplicationContext( “META-INF/spring/knights.xml”); Knight k = context.getBean(Knight.class); // 빈 얻기 k.embarkOnQuest(); // 사용 context.close(); }–## 1.1.3 애스펙트 적용AOP(Aspect-Oriented Programming)은 애플리케이션 전체에 걸쳐 사용되는 기능을 재사용할 수 있는 컴포넌트에 담는다. 즉, 소프트웨어 내부의 관심사들을 서로 분리하는 기술이다. 예를 들어 로깅, 트랜잭션 관리, 보안 등의 시스템 서비스(이렇게 여러 컴포넌트에 관련되는 것을 *횡단 관심사(cross-cutting concerns)라고 한다. 이러한 관심사가 각각의 컴포넌트에 퍼지게 되면 다음과 같은 문제점이 있다.1. 관심사를 구현하는 코드가 시스템 전반에 중복되어 걸쳐있어, 변경해야하는 경우 모두 변경해야 한다.2. 컴포넌트의 코드가 본연의 기능과 관련 없응 코드로 지저분해진다.–### 1.1.3-1AOP를 이용하면 응집도가 높고 본연의 관심사에 집중하는 컴포넌트를 만든다. 즉, 애스펙트는 확실히 POJO를 단순화한다. – 1.1.3-2ex) 기사가 원정전,후에 노래가 울려야 할 경우 public class BraveKnight implements Knight { ... public void embarkOuest() { sing.beforeQuest(); // 기사가 이것까지 관리해야할까? quest.embark(); sing.afterQuest(); } } – 1.1.3-3&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; ...&gt; &lt;bean id=&quot;sing&quot; class=&quot;com.test.Sing&quot;&gt; ... &lt;/bean&gt; &lt;aop:config&gt; &lt;aop:aspect ref=&quot;sing&quot;&gt; &lt;aop:pointcut id=&quot;embark&quot; expression=&quot;execution(* *.embarkOnQuest(..))&quot;/&gt; &lt;!-- 포인트커트 정의 --&gt; &lt;aop:before pointcut-ref=&quot;embark&quot; method=&quot;beforeQuest&quot;/&gt; &lt;aop:after pointcut-ref=&quot;embark&quot; method=&quot;afterQuest&quot;/&gt; &lt;/sop:aspect&gt; &lt;/aop:config&gt; &lt;/bean&gt; 1.2 빈은 담는 그릇, 컨테이너스프링 기반 애플리케이션은 spring container 안에서 객체가 태어나고, 자라고, 소멸한다. 그래서 spring container는 객체를 생성하고, 엮어주고, 이들의 전체 생명주기를 관리한다. – 1.2-1스프링에는 여러 컨테이너 구현체가 존재하며, 이들은 크게 두 가지로 분류된다. 빈 팩토리(org.springframework.beans.factory.BeanFactory) 인터페이스에 의해 정의 DI에 대한 기본적인 지원을 제공하는 가장 단순한 컨테이너 애플리케이션 컨텍스트(org.springframework.context.ApplicationContext) 인터페이스에 의해 정의 빈 팩토리를 확장해 애플리케이션 프레임워크 서비스를 제공하는 컨테이너 – 1.2.1 애플리케이션 컨텍스트애플리케이션의 설정을 제공하기 위한 중앙 인터페이스로, 실행중일땐 읽기만 가능하지만, 실행이 지원되면 리로드될 수 있다. AnnotationConfigApplicationContext 하나 이상의 자바 기반 설정 클래스에서 스코프 애플리케이션 컨텍스트를 로드 AnnotationConfigWebApplicationContext 하나 이상의 자바 기반 설정 클래스에서 스프링 웹 애플리케이션 컨텍스트를 로드 ClassPathXmlApplicationContext 클래스패스에 위치한 xml 파일에서 컨텍스트 정의 내용을 로드 FileSystemXmlApplicationContext 파일 경로로 지정된 xml 파일에서 컨텍스트 정의 내용 로드 XmlWebApplicationContext 웹 어플리케이션에 포함된 xml 파일에서 컨텍스트 정의 내용 로드 – 1.2.2 빈의 생명주기 – 1.2.2-1 life-cycle 스프링이 빈 인스턴스화 스프링이 값과 빈의 레퍼런스를 빈의 프로퍼티에 주입 빈이 BeanNameAware를 구현하면 스프링이 빈의 ID를 setBEanName()에 넘김 빈이 BeanFactoryAware를 구현하면 setBEanFactory() 호출하여 빈팩토리 자체를 넘김 빈이 ApplicationContextAware를 구현하면 스프링이 setApplicationContext()를 호출하고 둘러싼 애플리케이션컨텍스트에 대한 참조를 넘김 빈이 BeanPostProcessor 인터페이스를 구현하면 스프링은 postProcessBeforeInitialzation()을 호출 – 1.2.2-2 life-cycle빈이 InitialzingBean 인터페이스를 구현하면 스프링은 afterPropertiesSet() 호출, 빈이 init-method와 함께 선언됐으면 지정한 초기화 메소드가 호출빈이 BeanPostProcessor를 구현하면 스프링은 postProcessAfterInitialization() 호출이 상태가 되면 빈은 애플리케이션에서 사용될 준비가 된 것이며, 애플리케이션 컨텍스트가 소멸될 때까지 애플리케이션 컨텍스트에 남아 있다.빈이 DisposableBean 인터페이스를 구현하면 스프링은 destroy()를 호출한다. 마찬가지고 빈이 destroy-method와 함께 선언됬으면 지정 메소드가 호출","categories":[{"name":"slide","slug":"slide","permalink":"https://wickso.me/categories/slide/"}],"tags":[{"name":"java","slug":"java","permalink":"https://wickso.me/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://wickso.me/tags/spring/"}]}]}