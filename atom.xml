<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wicksome Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wicksome.github.io/"/>
  <updated>2017-04-28T07:42:23.000Z</updated>
  <id>https://wicksome.github.io/</id>
  
  <author>
    <name>Yeongjun Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What the heck is &quot;Script error&quot;?</title>
    <link href="https://wicksome.github.io/2017/04/27/what-is-script-error/"/>
    <id>https://wicksome.github.io/2017/04/27/what-is-script-error/</id>
    <published>2017-04-27T03:05:22.000Z</published>
    <updated>2017-04-28T07:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><a href="https://blog.sentry.io/2016/05/17/what-is-script-error.html" rel="external nofollow noopener noreferrer" target="_blank">https://blog.sentry.io/2016/05/17/what-is-script-error.html</a></p>
<p>(+)
<a href="https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html" rel="external nofollow noopener noreferrer" target="_blank">https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2016/0
    
    </summary>
    
    
      <category term="js, javascript" scheme="https://wicksome.github.io/tags/js-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Factory Method Pattern</title>
    <link href="https://wicksome.github.io/2017/04/26/factory-method-pattern/"/>
    <id>https://wicksome.github.io/2017/04/26/factory-method-pattern/</id>
    <published>2017-04-26T04:32:16.000Z</published>
    <updated>2017-04-28T07:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul>
<li><em>[<a href="http://wiki.c2.com/?GangOfFour" rel="external nofollow noopener noreferrer" target="_blank">GOF</a>{kr}:156] - 팩토리 메서드</em></li>
<li>GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015.</li>
</ul>
<blockquote><p><strong>의도</strong><br>
객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다.</p>
<p><strong>구조</strong><br>
<img src="https://www.codeproject.com/KB/architecture/csdespat_1/dpcs_fm.gif" alt="Factory Method Pattern"></p>
<p><strong>활용성</strong><br></p>
<ul>
<li>어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때</li>
<li>생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때</li>
<li>객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때</li>
</ul>
</blockquote>
<a id="more"></a>
<h2>예제</h2>
<p>예를 들어 다양한 종류의 문서를 표현하는 응용프로그램 프레임워크가 있다. 이를 위해서는 일단 두 개의 큰 추상화가 필요하다. 하나는 <em>Creator</em>(응용프로그램) 추상 클래스이고, 다른 하나는 <em>Product</em>(문서) 추상 클래스(혹은 인터페이스)이다.
<em>Creator</em> 클래스는 문서의 인스턴스를 <ins>언제</ins> 만들지는 알지만, <ins>어떤 문서</ins>를 만들어야 하는지는 알지 못한다. <em>Product</em> 클래스가 추상 클래스이기 때문에 인스턴스를 가질 수 없기 때문이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">newProduct</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> createProduct(); &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">()</span></span>; <span class="comment">// factory method</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>팩토리 메서드 패턴은 이런 문제에 대한 해법을 제시한다. <em>Document</em>의 서브클래스 중 어느 것을 생성해야 하는지에 대한 정보를 캡슐화하고, 그것을 프레임워크에서 떼어낸다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><em>TextProduct</em> 클래스와 PhotoProduct 클래스를 팩토리 메서드 패턴을 활용하여 생성한다면 아래와 같은 방법이 있다.</p>
<h4>방법 1) 추상 클래스</h4>
<p>사용자는 특정 응용프로그램에 종속적인 구현을 위해서 두 클래스의 서브 클래스를 정의할 수 있다. <em>Creator</em> 클래스는 <em>Product</em> 객체를 관리하는 책임을 맡고 있으며, 필요에 따라 문서를 생성할 수도 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory pattern example with abstract class</span></div><div class="line">Creator textCreator = <span class="keyword">new</span> TextCreator();</div><div class="line">Product p1 = textCreator.newProduct();</div><div class="line"></div><div class="line">Creator photoCreator = <span class="keyword">new</span> PhotoCreator();</div><div class="line">Product p2 = photoCreator.newProduct();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WordProduct();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PhotoProduct();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhotoProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h4>방법 2) 팩토리 메서드 매개변수화 - abstract factory pattern</h4>
<p>팩토리 메서드가 매개변수를 받아서 어떤 종류의 제품을 생성할지 만드는 방법도 있다. (추상 팩토리 패턴은 팩토리 메서드를 이용해서 구현할 때가 많다)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Factory pattern example using argument</span></div><div class="line">Product p1 = Creator1.create(ProductType.TEXT);</div><div class="line">Product p2 = Creator1.create(ProductType.PHOTO);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ProductType &#123;</div><div class="line">  TEXT, PHOTO</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Product <span class="title">create</span><span class="params">(ProductType type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">      <span class="keyword">case</span> TEXT:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExcelProduct();</div><div class="line">      <span class="keyword">case</span> PHOTO:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImageProduct();</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4>방법 3) Lazy Initialization 기법</h4>
<p>인스턴스화하는 접근자 메서드를 통해서만 인스턴스에 접근하는 방법으로, 생성자에서 아무 의미 없는 값으로 인스턴스에 대한 매개변수를 초기화하고, 접근자 메서드가 인스턴스를 반환하도록 할 수 있다. 생성자가 초기화 시키는 것이 아니라 필요한 시점에서 초기화를 수행하기 때문에 이런 기법을 Lazy Initialization이라고 한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory pattern with lazy initialization</span></div><div class="line">TextCreator textCreator = <span class="keyword">new</span> TextCreator();</div><div class="line">List collection = textCreator.newCollection();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> List <span class="title">createCollection</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TextProduct&gt;();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;Product&gt; collection = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> List <span class="title">newCollection</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// lazy initialization</span></div><div class="line">    <span class="keyword">if</span> (collection == <span class="keyword">null</span>) &#123;</div><div class="line">      collection = createCollection();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> collection;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// factory method</span></div><div class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> List <span class="title">createCollection</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4>방법 4) 템플릿 활용</h4>
<p>팩토리 메서드를 사용하면 생길 수 있는 문제점 중 하나는 <em>Product</em> 클래스 하나를 추가하려 할 때마다 <em>Creator</em> 클래스를 서브클래싱해야 한다는 점이다(<a href="#">방법 1</a>). 이로써 클래스 계통의 부피가 확장되는 문제가 생길 수 있다. 이런 문제를 해결할 수 있는 방법 중 하나는 <em>Creator</em> 클래스를 상속받는 제네릭 클래스를 정의하고 Product 클래스로 매개변수화되도록 만드는 것이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// factory pattern example whti template</span></div><div class="line">StandardCreator&lt;WordProduct&gt; wordProductCreator = <span class="keyword">new</span> StandardCreator&lt;&gt;(WordProduct.class);</div><div class="line">Product p1 = wordProductCreator.newProduct();</div><div class="line"></div><div class="line">StandardCreator&lt;ImageProduct&gt; imageProductCreator = <span class="keyword">new</span> StandardCreator&lt;&gt;(ImageProduct.class);</div><div class="line">Product p2 = imageProductCreator.newProduct();</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creator Template</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt; product type</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardCreator</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Product</span>&gt; <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Class&lt;T&gt; cls;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StandardCreator</span><span class="params">(Class&lt;T&gt; cls)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cls = cls;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">    T product = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      product = cls.newInstance();</div><div class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> product;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2>참고</h2>
<blockquote><p>Factory Method라는 패턴 이름이 적절하지 못한데, 이름으로 인해 객체를 생성하는 메소드를 Factory method라 오해하는 개발자가 많이 있다(Allen Holub의 말을 인용.) 이런 생성 메소드가 모두 Factory method 패턴을 사용하는 것은 아니다. Template Method의 생성 패턴 버전으로 볼 수 있는데 Template Method를 알지 못한다면 그 패턴을 먼저 이해하는 것이 Factory Method를 이해하기 수월할 것이다.</p>
<footer><strong>위키백과</strong><cite><a href="https://ko.wikipedia.org/wiki/%ED%8C%A9%ED%86%A0%EB%A6%AC_%EB%A9%94%EC%84%9C%EB%93%9C_%ED%8C%A8%ED%84%B4" rel="external nofollow noopener noreferrer" target="_blank">팩토리 메서드 패턴</a></cite></footer></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;em&gt;[&lt;a href=&quot;http://wiki.c2.com/?GangOfFour&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GOF&lt;/a&gt;{kr}:156] - 팩토리 메서드&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;GoF, 김정아(옮긴이), Design Patterns, 개정판, 프로텍미디어, 2015.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;의도&lt;/strong&gt;&lt;br&gt;
객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할지에 대한 결정은 서브클래스가 내리도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;구조&lt;/strong&gt;&lt;br&gt;
&lt;img src=&quot;https://www.codeproject.com/KB/architecture/csdespat_1/dpcs_fm.gif&quot; alt=&quot;Factory Method Pattern&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;활용성&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 클래스가 자신이 생성해야 하는 객체의 클래스를 예측할 수 없을 때&lt;/li&gt;
&lt;li&gt;생성할 객체를 기술하는 책임을 자신의 서브클래스가 지정했으면 할 때&lt;/li&gt;
&lt;li&gt;객체 생성의 책임을 몇 개의 보조 서브클래스 가운데 하나에게 위임하고, 어떤 서브클래스가 위임자인지에 대한 정보를 국소화시키고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="design pattern, creational pattern, java" scheme="https://wicksome.github.io/tags/design-pattern-creational-pattern-java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 2장 - 객체 생성과 삭제</title>
    <link href="https://wicksome.github.io/2017/04/24/2-creating-and-destroying-objects/"/>
    <id>https://wicksome.github.io/2017/04/24/2-creating-and-destroying-objects/</id>
    <published>2017-04-24T13:31:52.000Z</published>
    <updated>2017-04-28T07:42:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>객체의 생성과 삭제</strong></p>
<p>규칙 1. <a href="#item1">생성자 대신 static factory 메서드 사용을 고려하자</a><br>
규칙 2. <a href="#item2">생성자의 매개변수가 많을 때는 builder를 고려하자</a><br>
규칙 3. <a href="#item3">private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라</a><br>
규칙 4. <a href="#item4">객체 생성을 막을 때는 private 생성자를 사용하라</a><br>
규칙 5. <a href="#item5">불필요한 객체는 만들지 말라</a><br>
규칙 6. <a href="#item6">유효기간이 지난 객체 참조는 폐기하라</a><br>
규칙 7. <a href="#item7">종료자 사용을 피하라</a><br></p>
<a id="more"></a>
<p><a name="item1"></a></p>
<h2>규칙 1. 생성자 대신 static factory method 사용을 고려하자</h2>
<p>클래스를 통해 객체를 만드는 방법</p>
<ul>
<li>Constructor</li>
<li>Static factory method<br>
(Design Patterns에 나오는 [팩토리 메서드 패턴][dp-factory-method]과 다르다.)</li>
</ul>
<p><em>e.g. Static factory method</em></p>
<figure class="highlight java"><figcaption><span>"Static factory method"</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boolean</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> value;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</div><div class="line">    FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</div><div class="line">    <span class="comment">// Q. static 초기화 블록 vs 선언과 동시에 생성</span></div><div class="line">    <span class="comment">// A. 초기화 블록은 클래스 초기화 될 떄 수행하고, 동시 생성은 언제?</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Boolean</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123; <span class="keyword">this</span>.value = b; &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Boolean</span><span class="params">(String str)</span> </span>&#123; <span class="keyword">this</span>.value = <span class="string">"true"</span>.equalsIgnoreCase(str); &#125;</div><div class="line">  	<span class="comment">// Q. str.equalsIgnoreCase("true") 를 안쓰는 이유</span></div><div class="line">  <span class="comment">// A. str이 null이면 NullPointException 발생</span></div><div class="line"></div><div class="line">  <span class="comment">// Static factory method</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> b = (<span class="keyword">boolean</span>)Boolean.TRUE; <span class="comment">// unboxing</span></div><div class="line">Boolean b = (Boolean)<span class="keyword">true</span>; <span class="comment">// boxing</span></div><div class="line">Boolean b = <span class="keyword">true</span>; <span class="comment">// auto boxing</span></div><div class="line">Boolean b = Boolean.valueOf(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>public으로 선언된 생성자 대신 Static factory method를 제공하는 방법의 장단점은 아래와 같다.</p>
<h4>장점</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.util;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123; <span class="comment">// 3-3</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Collections</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 2-2(Non-instantiable class)</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map EMPTY_MAP = <span class="keyword">new</span> EmptyMap&lt;&gt;(); <span class="comment">// 2-1, 2-2(Singleton)</span></div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Map&lt;K,V&gt; <span class="title">emptyMap</span><span class="params">()</span> </span>&#123; <span class="comment">// 1, 3-2, 4</span></div><div class="line">    <span class="keyword">return</span> (Map&lt;K,V&gt;) EMPTY_MAP;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; // 3-1</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Serializable</span></div><div class="line">  &#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;<span class="comment">/* ... */</span>&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 3-3</span></div></pre></td></tr></table></figure>
<p>이해하기 쉬운 이름의 메서드를 생성자로 사용할 수 있다(가독성).<br></p>
<ul>
<li>클래스의 인스턴스를 생성하는데 있어서 매개변수의 타입과 갯수로 구별하는 것보단 잘 지은 이름이 더 파악하기 쉽다.</li>
</ul>
<p>호출할 때마다 인스턴스화하지 않아도 된다.<br></p>
<ul>
<li>
<p>만든 객체를 캐시<sub>cache</sub> 해놓고 재사용하여 같은 객체가 불필요하게 거듭 생성되는 일을 피할 수 있다.<br>
<code>Boolean.value(boolean)</code>는 이 기법을 활용한 좋은 사례로 [Flyweight 패턴][dp-flyweight]과 유사하다. 동일한 객체가 요청되는 일이 잦고, 특히 객체를 만드는 비용이 클 때 적용하면 성능을 크게 개선할 수 있다.</p>
</li>
<li>
<p>같은 객체를 반복해서 반환할 수 있다.<br></p>
<pre><code>&gt; 어떤 시점에 어떤 객체가 얼마나 존재할지를 정밀하게 제어할 수 있다. 그런 기능을 갖춘 클래스를 *개체 통제 클래스&lt;sub&gt;instance-controlled class&lt;/sub&gt;*라고 부른다.

개체 통제 클래스를 작성하는 이유는 아래와 같다.

- [Singleton pattern](#item3) 적용

- [Non-instantiable class](#item4) 생성 가능(e.g. Utility class)

	<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

- [불변 클래스](#item15)

	-   `equals()` 대신 `==` 연산자 사용 가능

	-   [enum](#item30)이 이 기법을 사용

	<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> re;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> im;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Complex</span><span class="params">(<span class="keyword">double</span> re, <span class="keyword">double</span> im)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.re = re;</div><div class="line">    <span class="keyword">this</span>.im = im;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Complex <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> re, <span class="keyword">double</span> im)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Complex(re, im);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<ol start="3">
<li>
<p>자신의 인스턴스만 반환하는 생성자와는 달리, 서브타입 객체도 반환 가능하다.</p>
<ol>
<li>
<blockquote>
<p>“public으로 선언되지 않은 클래스의 객체를 반환하는 API를 만들 수 있다. 그러면 구현 세부사항을 감출 수 있으므로 아주 간결한 API가 가능하다.”</p>
</blockquote>
</li>
<li>
<blockquote>
<p>“이 기법은 인터페이스 기반 프레임워크(interface-based framework) 구현에 적합한데, 이 프레임워크에서 인터페이스는 정적 팩터리 메서드의 반환값 자료형으로 이용된다.”</p>
</blockquote>
</li>
<li>
<blockquote>
<p>“관습상 반환값 자료형이 Type이라는 이름의 인터페이스인 정적 팩터리 맥서드를 Types라는 이름의 객체 생성 불가능 클래스안에 둔다.”</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">  <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Fruits</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getBanana</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Banana(); &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getApple</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> Apple(); &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"apple"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"banana"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  Fruit apple = Fruits.getApple();</div><div class="line">  apple.getName();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>제네릭 클래스의 인스턴스를 생성하는 코드를 간결하게 해준다.</p>
<p>static 팩토리 메서드를 사용하면 컴파일러가 타입 추론(type inference)으로 해결할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before</span></div><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">// after: 1.6 버전</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">HashMap&lt;K, V&gt; <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K, V&gt;();</div><div class="line">&#125;</div><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = HahsMap.newInstance();</div><div class="line"></div><div class="line"><span class="comment">// after: 1.7</span></div><div class="line"><span class="comment">// &lt;&gt;(다이아몬드) 연산자 추가</span></div><div class="line">Map&lt;String, List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</div></pre></td></tr></table></figure>
</li>
</ol>
<div class="tip">
	*java.utils.Collections* 클래스에는 Static factory method의 장점이 대부분 적용되어 있다.
</div>
<h2>단점</h2>
<ol>
<li>
<p>Static factory method만 있는 클래스는 public이나 protected로 선언된 클래스가 없으므로 하위 클래스를 만들 수 없다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123;</div><div class="line">  Collections() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// inheritance</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCollections</span> <span class="keyword">extends</span> <span class="title">Collections</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomCollections</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(); <span class="comment">// 불가능</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>그러므로, <a href="#item16">Composition</a>을 사용한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// composition</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomCollections</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Collections collections;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>상속을 사용하는 경우: <code>is-a</code> 관계</li>
<li>컴포지션을 사용하는 경우: <code>has-a</code> 관계</li>
</ul>
</li>
<li>
<p>다른 Static factory method와 쉽게 구별할 수 없다.</p>
<p>API 문서에 메서드와 생성자가 분리되어 있지만, static 팩토리 메서드는 다른 메서드와 섞여 잘 구분되지 않는다. 그래서 컨벤션을 정하여 보다 구별하기 쉽게 한다.</p>
<ul>
<li><code>valueOf</code>: 자신의 매개변수와 같은 값을 갖는 인스턴스를 반환</li>
<li><code>of</code>: <code>valueOf</code> 줄인 형태, <a href="#item32"><em>EnumSet</em></a>에서 사용</li>
<li><code>getInstance</code>: 매개변수에 맞는 인스턴스 반환, 싱글톤인 경우 하나의 인스턴스 반환</li>
<li><code>newInstance</code>: 새로운 인스턴스 반환</li>
<li><code>get</code><em>Type</em>: <code>getInstance</code>와 유사하나 팩토리 메서드가 다른 클래스에 있을 때 사용. 여기서 <em>Type</em>은 팩토리 메서드에서 반환되는 객체의 타입을 나타낸다.</li>
<li><code>new</code><em>Type</em>: <code>get</code><em>Type</em>와 같음(?)</li>
</ul>
</li>
</ol>
<p>[🔝 <em>위로 이동</em>][top]</p>
<hr>
<p><a name="item2"></a></p>
<h1>규칙 2. 생성자의 매개변수가 많을 때는 빌더(builder)를 고려하자</h1>
<p>선택적 인자가 많을 때 객체를 생성하는 방법 세 가지.</p>
<h2>방법 1) 점층적 생성자 패턴(telescoping constructor pattern)</h2>
<blockquote>
<p><em>Bad Practice 👎</em></p>
</blockquote>
<ul>
<li>이 방법은 필수 인자만 받는 생성자를 하나 정의하고, 선택적 인자를 받는 생성자를 추가하는 것이다.</li>
<li>객체를 생성할 때는 설정하려는 인자 갯수에 맞는 생성자를 골라 호출한다.</li>
</ul>
<p><strong>문제점</strong></p>
<ul>
<li>설정할 필요가 없는 필드에도 인자를 전달해야 해야 한다.</li>
<li>인자 수가 늘어날수록 가독성이 떨어진다.</li>
</ul>
<p><em>Code</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">// 필수</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age; <span class="comment">// 필수</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String mail;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String city;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String state;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(name, age, <span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String mail)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(name, age, mail, <span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String mail, String city)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(name, age, mail, city, <span class="string">""</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String mail, String city, String state)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.mail = mail;</div><div class="line">    <span class="keyword">this</span>.city = city;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>Usage</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person me = <span class="keyword">new</span> Person(<span class="string">"yeongjun.kim"</span>, <span class="string">"27"</span>);</div><div class="line">Person me = <span class="keyword">new</span> Person(<span class="string">"yeongjun.kim"</span>, <span class="string">"27"</span>, <span class="string">"opid911@gmail.com"</span>);</div></pre></td></tr></table></figure>
<h2>방법 2) JavaBeans 패턴</h2>
<blockquote>
<p><em>Bad Practice 👎</em></p>
</blockquote>
<ul>
<li>인자 없는 생성자를 호출하여 객체를 만들고, setter로 값 설정하는 방법.</li>
<li>객체 생성도 쉽고, 가독성도 좋다.</li>
</ul>
<p><strong>문제점</strong></p>
<ul>
<li>1회의 함수 호출로 객체 생성을 끝낼 수 없으므로, 객체 일관성이 일시작으로 깨질 수 있다.</li>
<li>변경 불가능 클래스를 만들 수 없다. 해결하기 위해서 추가 구현할 코드가 많아진다.</li>
</ul>
<p><em>Code</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">private</span> String mail;</div><div class="line">  <span class="keyword">private</span> String city;</div><div class="line">  <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>Usage</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person me = <span class="keyword">new</span> Person();</div><div class="line">me.setName(<span class="string">"yeongjun.kim"</span>);</div><div class="line">me.setAge(<span class="number">27</span>);</div></pre></td></tr></table></figure>
<h2>방법 3) Builder 패턴<sub>[↩︎][dp-builder]</sub></h2>
<blockquote>
<p><strong><em>Good Practice 👍</em></strong></p>
</blockquote>
<ul>
<li>
<p>필수 인자들을 생성자(또는 정적 팩터리 메서드)에 전달하여 빌더 객체를 만들고, 선택적 인자들을 추가한 뒤, 마지막에 <code>build()</code>를 호출하여 Immutable 객체를 만드는 방법.</p>
<p><em>Code</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String mail;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String city;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String state;</div><div class="line"></div><div class="line">  <span class="comment">// 빌더 객체</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="comment">// 필수 인자</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String age;</div><div class="line">    <span class="comment">// 선택적 인자 - 기본값으로 초기화</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mail = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String city = <span class="string">""</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String state = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String of, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">      <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">mail</span><span class="params">(String mail)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.mail = mail;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">city</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.city = city;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">state</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.state = state;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.mail = mail;</div><div class="line">    <span class="keyword">this</span>.city = city;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>Usage</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Person me = Person.Builder(<span class="string">"yeongjun.kim"</span>, <span class="number">27</span>)</div><div class="line">  .mail(<span class="string">"opid911@gmail.com"</span>)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
</li>
<li>
<p>빌더 클래스(<em>Builder</em>)는 빌더가 만드는 객체 클래스(<em>Person</em>)의 정적 맴버 클래스로 정의한다(<a href="#item22">규칙 22</a>).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>불변식을 적용할 수 있으며, build()에서 불변식이 위반되었는지 검사할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      Person result = <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">      <span class="keyword">if</span>(<span class="comment">/* result의 값 검사 */</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="comment">/* 위반 원인 */</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>빌더 객체에서 실제 객체로 인자가 복사된 다음에 불변식들을 검사할 수 있다는 것, 그리고 그 불변식을 빌더 객체의 필드가 아니라 실제 객체의 필드를 두고 검사할 수 있다는 것은 중요하다(<a href="#item39">규칙 39</a>).</li>
<li>불변식을 위반한 경우, *build()*는 <em>IllegalStateException</em>을 던져야 한다(<a href="#item60">규칙 60</a>).</li>
<li>예외 객체를 살펴보면 어떤 불변식을 위반했는지 알아낼 수도 있어야 한다(<a href="#item63">규칙 63</a>).</li>
</ul>
<p><em>cf. 불변식을 강제하는 방법</em></p>
<ul>
<li>불변식이 적용될 값 전부를 인자로 받는 setter를 정의하는 방법.</li>
<li>setter는 불변식이 만족하지 않으면 <em>IllegalArgumentException</em>을 던짐.</li>
<li>build()가 호출되기 전에 불변식을 깨뜨리는 인자가 전달되었다는 것을 신속하게 알 수 있는 장점.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">setNameAndAge</span><span class="params">(String name, <span class="keyword">int</span> ate)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>메서드마다 하나씩, 필요한 만큼 varargs 인자를 받을 수 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">names</span><span class="params">(String... names)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.names = names;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">foramily</span><span class="params">(String... names)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.farther = names[<span class="number">0</span>];</div><div class="line">      <span class="keyword">this</span>.marther = names[<span class="number">1</span>];</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>유연하다. (e.g. 객체가 만들어질 때마다 자동적으로 증가하는 일련번호 같은 것을 채울 수 있다)</p>
</li>
<li>
<p>인자가 설정된 빌더는 훌륭한 [Abstract Factory][dp-abstract-factory]다. JDK1.5 이상을 사용하는 경우, 제네릭 자료형 하나면 어떤 자료형의 객체를 만드는 빌더냐의 관계 없이 모든 빌더에 적용할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">Builder</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>e.g.</strong> <em>Code at package <code>java.util.stream</code></em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.builder().add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>).build();</div></pre></td></tr></table></figure>
</li>
<li>
<p>빌더 객체를 인자로 받는 메서드는 보통 *한정적 와일드카드 자료형<sub>bounded wildcard type</sub>*을 통해 인자의 자료형을 제한한다(<a href="#items28">규칙 28</a>).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Tree <span class="title">buildTree</span><span class="params">(Builder&lt;? extends Node&gt; nodeBuilder)</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>자바가 제공하는 추상적 팩토리로는 Class 객체가 있으며, 이 객체의 <em>newInstance()</em> 가 build 메서드 구실을 한다.</p>
<p><strong>하지만,</strong> newInstance()는 항상 무인자 생성자를 호출하려 하는데, 문제는 그런 생성자가 없을 수도 있다는 것. TO-DO</p>
</li>
</ul>
<p><strong>문제점</strong></p>
<ul>
<li>빌더 객체를 만드는 오버헤드가 문제가 될 수 있다(성능이 중요한 상황). 그러니 인자 갯수가 통제할 수 없을 정도로 많아지만 빌더 패턴을 적용하자.</li>
</ul>
<h2>요약</h2>
<p>빌더 패턴은 인자가 많은 생성자나 정적 팩터리가 필요한 클래스를 설계할 때, 특시 대부분의 인자가 선택적 인자인 상황에 유용하다.</p>
<p><strong>cf.</strong> <em>Code with <a href="https://projectlombok.org/features/Builder.html" rel="external nofollow noopener noreferrer" target="_blank">Lombok</a></em> - 정적 팩터리 메서드로 구현</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Value</span> <span class="comment">// immutable(private, final 적용)</span></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  String name;</div><div class="line">  <span class="keyword">int</span> age;</div><div class="line">  String mail;</div><div class="line">  String city;</div><div class="line">  String state;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[🔝 <em>위로 이동</em>][top]</p>
<hr>
<p><a name="item3"></a></p>
<h1>규칙 3. private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라</h1>
<blockquote>
<p><a href="dp-singleton">싱글턴</a>은 객체를 하나만 만들 수 있는 클래스다.</p>
</blockquote>
<h2>singleton 구현 방법</h2>
<h3><em>public static final</em> 상수(before JDK 1.5)</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Single INSTANCE = <span class="keyword">new</span> Single();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>문제점</strong></p>
<ul>
<li>리플렉션으로 private 생성자 호출 가능</li>
<li>생성자에서 에러날 경우 예외처리 불가능 -&gt; static 초기화 블럭으로 해결 가능</li>
</ul>
<h3><em>static factory</em> 메서드(before JDK 1.5)</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single INSTANCE = <span class="keyword">new</span> Single();</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> INSTANCE;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>문제점</strong></p>
<ul>
<li>
<p>리플렉션으로 private 생성자 호출 가능</p>
</li>
<li>
<p>위 두 방법에서 <a href="#serializable">직렬화</a>가능 클래스로 만드려면 클래스 선언에 <code>implements Serializable</code>을 추가하는 것으로는 부족하다.</p>
<ul>
<li>
<p>클래스 선언에 <code>implements Serializable</code> 추가</p>
</li>
<li>
<p>모든 객체 필드에 <code>transient</code> 선언</p>
</li>
<li>
<p><a href="#item77"><code>readResolve()</code> 추가</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 동일한 객체가 반환되도록 하는 동시에,</span></div><div class="line">  <span class="comment">// 가짜 객체는 gc가 처리하도록 만든다.</span></div><div class="line">  <span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>thread safe하려면 synchronized 적용</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  public static synchronized Single getInstance() &#123; ... &#125;</div><div class="line">  ```  </div><div class="line"></div><div class="line">### Initialization on demand holder idiom</div><div class="line"></div><div class="line">- jvm 의 class loader의 매커니즘과 class의 load 시점을 이용하여 내부 class를 생성시킴으로 thread 간의 동기화 문제를 해결</div><div class="line">- lazy initialization</div><div class="line"></div><div class="line">```java</div><div class="line">public class Singleton &#123;</div><div class="line">  private Singleton() &#123; &#125;</div><div class="line"></div><div class="line">  private static class SingletonHolder &#123;</div><div class="line">          public static final Singleton INSTANCE = new Singleton();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static Singleton getInstance() &#123;</div><div class="line">          return SingletonHolder.INSTANCE;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3><em>enum</em>을 이용하는 방법(after JDK 1.5)</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Single &#123;</div><div class="line">  INSTANCE;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>직렬화 자동으로 처리된다.</li>
<li>리플렉션 공격에도 안전하다.</li>
<li>Enum 생성은 Thread-safe하지만, 내부 메서드들은 Thread-safe를 보장하지 않는다.</li>
</ul>
<p><em>why?</em></p>
<ul>
<li>선언된 상수 이외의 다른 객체는 존재할 수 없다는 확실한 보장이 생긴다(JVM이 해주는 보장).</li>
<li><code>enum</code> 타입은 <code>Comparable</code> 인터페이스, <code>Serializable</code> 인터페이스가 구현되어 있다.</li>
</ul>
<h2>참고</h2>
<h3>Link</h3>
<ul>
<li>java singleton pattern (싱글톤 패턴) - <a href="https://blog.seotory.com/post/2016/03/java-singleton-pattern" rel="external nofollow noopener noreferrer" target="_blank">https://blog.seotory.com/post/2016/03/java-singleton-pattern</a></li>
<li>게으른 홀더를 통한 싱글턴의 동시성 문제 해결 (Initialization on demand holder idiom) - <a href="http://changsuk.me/?p=1433" rel="external nofollow noopener noreferrer" target="_blank">http://changsuk.me/?p=1433</a></li>
<li>Thread-safe Enum Singleton - <a href="http://stackoverflow.com/questions/28369025/thread-safe-enum-singleton" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/28369025/thread-safe-enum-singleton</a></li>
</ul>
<h3>serializable</h3>
<blockquote>
<p>객체의 내용을 파일에 저장하거나 네트워크로 전송하기 위해서 스트림으로 만드는 작업(바이트 단위로 변환)</p>
</blockquote>
<ul>
<li><code>Serializable</code> 인터페이스 구현</li>
<li>모든 필드 또한 <code>Serializable</code> 인터페이스 구현</li>
<li>제외하고자하는 필드는 <code>transient</code></li>
</ul>
<p><em>example</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">    SerializerTest test = <span class="keyword">new</span> SerializerTest();</div><div class="line">    test.serialization();</div><div class="line">    test.deserialization();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializerTest</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String filePath = <span class="string">"/Users/yeongjun/Desktop/test.ser"</span>;</div><div class="line">  <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialization</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    user = <span class="keyword">new</span> User(<span class="string">"yj"</span>, <span class="number">26</span>, <span class="string">"pwd"</span>);</div><div class="line">    FileOutputStream f = <span class="keyword">new</span> FileOutputStream(filePath);</div><div class="line">    ObjectOutputStream o = <span class="keyword">new</span> ObjectOutputStream(f); <span class="comment">// 직렬화 클래스</span></div><div class="line">    o.writeObject(user); <span class="comment">// 파라미터로 넘긴 객체를 스트림으로 만들어서 출력하는 메서드</span></div><div class="line">    o.close();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deserialization</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</div><div class="line">    FileInputStream f = <span class="keyword">new</span> FileInputStream(filePath);</div><div class="line">    ObjectInputStream o = <span class="keyword">new</span> ObjectInputStream(f); <span class="comment">// 역직렬화 클래스</span></div><div class="line">    user = (User)o.readObject(); <span class="comment">// 입력된 스트림으로부터 객체를 만들어서 반환하는 메서드</span></div><div class="line">    o.close();</div><div class="line">    System.out.println(user.toString());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; <span class="comment">// 이건 왜?</span></div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> String password;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age, String password)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.password = password;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"User&#123;name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">", password='"</span> + password + <span class="string">"\'&#125;"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[🔝 <em>위로 이동</em>][top]</p>
<hr>
<p><a name="item4"></a></p>
<h1>규칙 4. 객체 생성을 막을 때는 private 생성자를 사용하라</h1>
<ul>
<li>생성자를 생략하면 컴파일러는 자동으로 인자없는 <code>public</code> 생성자를 만든다. 그러므로, 객체 생성을 막기 위해서 <code>private</code> 생성자를 추가한다.</li>
<li><code>AssertionError()</code>를 통해 혹시나 클래스내에서 생성자를 사용할 경우를 방지한다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123;		</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>cf.</strong> <em>Code with <a href="https://projectlombok.org/features/experimental/UtilityClass.html" rel="external nofollow noopener noreferrer" target="_blank">Lombok</a></em></p>
<ul>
<li>필드, 메서드를 static으로 변환</li>
<li>private 생성자 추가</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UtilityClass</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> VERSION  = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> VERSION;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>🔝 [<em>위로 이동</em>][top]</p>
<hr>
<p><a name="item5"></a></p>
<h1>규칙 5. 불필요한 객체는 만들지 말라</h1>
<ul>
<li>
<p>변경 불가능(immutable) 객체는 언제나 재용사할수 있다.(<a href="#item15">규칙 15</a>)</p>
</li>
<li>
<p><em>Bad Practice</em> 코드는 실행될 때마다 <code>String</code> 객체를 만드는 쓸데없는 짓을 한다. loop 도는 만큰 <code>String</code> 객체를 생성한다. <em>Good Practices</em>는 실행할 때마다 객체를 생성하지 않고, 동일한 <code>String</code> 객체를 사용한다. 같은 가상머신에서 실행되는 모든 코드가 해당 객체를 사용한다(<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.5" rel="external nofollow noopener noreferrer" target="_blank">JLS, 3.10.5</a>).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999999</span>; i++) &#123;</div><div class="line">  <span class="comment">// Bad Practice</span></div><div class="line">  System.out.println(<span class="keyword">new</span> String(<span class="string">"test"</span>));</div><div class="line"></div><div class="line">  <span class="comment">// Good Practice</span></div><div class="line">  System.out.println(<span class="string">"test"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>Static Factory Method(<a href="#item1">규칙 1</a>)를 이용하면 불필요한 객체 생성을 피할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Boolean.valueOf(String)</div></pre></td></tr></table></figure>
</li>
<li>
<p>변경 가능한 객체이지만 변경할 일이 없다면 재사용한다.</p>
<p><em>AS-IS</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span> </span>&#123;</div><div class="line">    Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line">    gmtCal.set(<span class="number">1946</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    Date boomStart = gmtCal.getTime();</div><div class="line">    gmtCal.set(<span class="number">1965</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    Date boomEnd = gmtCal.getTime();</div><div class="line">    <span class="keyword">return</span> birthDate.compareTo(boomStart) &gt;= <span class="number">0</span> &amp;&amp; birthDate.compareTo(boomEnd) &lt; <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>TO-BE</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_START;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_END;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line">    gmtCal.set(<span class="number">1946</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    BOOM_START = gmtCal.getTime();</div><div class="line">    gmtCal.set(<span class="number">1965</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    BOOM_END = gmtCal.getTime();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> birthDate.compareTo(BOOM_START) &gt;= <span class="number">0</span> &amp;&amp; birthDate.compareTo(BOOM_END) &lt; <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>static initialzer을 하지않고 <a href="#item71">lazy initialization</a> 기법을 사용할 수도 있다. 하지만, 추천하지 않는다. 구현이 복잡해질 뿐더러 <em>TO-BE</em>로 개선한 것 이상으로 성능을 높이기 어렵기 때문이다(<a href="#item55">규칙 55</a>).</p>
</li>
<li>
<p>어댑터 TO-DO</p>
</li>
<li>
<p>JDK 1.5 이후, 쓸데없는 객체 생성하는 방법 추가 - autoboxing</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  Long sum = <span class="number">0L</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    sum += i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sum</code>이 <code>long</code>이 아닌 <code>Long</code>으로 선언되어 있기 때문에 더해질때마다 객체가 생성된다(2^31개 생성). 객체 표현형 대신 기본 자료형을 사용하고, 생각지도 못한 자동 객체화가 발생하지 않도록 유의하라.</p>
</li>
<li>
<p>직접 관리하는 객체 풀을 만들어 객체 생성을 피하는 기법은 객체 생성 비용이 극단적으로 높지 않다면 사용하지 않는 것이 좋다.</p>
<p>독자적으로 관리되는 객체풀을 만들면,</p>
<ul>
<li>코드의 복잡성</li>
<li>메모리 요구량 증가</li>
<li>성능 떨어짐</li>
</ul>
<p>사용해야할 상황: <strong>데이터베이스</strong></p>
<ul>
<li>접속 비용이 큼</li>
<li>라이선스 정책에 따라 연결 수가 제한될 수 있음</li>
</ul>
</li>
<li>
<p>규칙 39는 방어적 복사<sub>defensive copy</sub>에 관한 것.</p>
<ul>
<li>규칙 5: “재사용이 가능하다면 새로운 객체는 만들지 말라”</li>
<li><a href="#item39">규칙 39</a>: “새로운 객체를 만들어야 한다면 기존 객체는 재사용하지 말라”</li>
</ul>
<p>방어적 복사가 요구되는 상황에서 객체를 재사용하는 것은 (쓸데없이 같은 객체를 만드는) 비용보다 훨씬 높다는 것에 유의하자. 필요할 때 방어적 복사본을 만들지 못하면 버그나 보안 결함으로 이어진다. 쓸데 없는 객체들은 고작 코드 스타일과 성능에나 영향을 줄 뿐이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 방어적 복사 방법</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Period</span><span class="params">(Date start, Date end)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.start = <span class="keyword">new</span> Date(start.getTime());</div><div class="line">  <span class="keyword">this</span>.end = <span class="keyword">new</span> Date(end.getTime());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>[🔝 <em>위로 이동</em>][top]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;객체의 생성과 삭제&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;규칙 1. &lt;a href=&quot;#item1&quot;&gt;생성자 대신 static factory 메서드 사용을 고려하자&lt;/a&gt;&lt;br&gt;
규칙 2. &lt;a href=&quot;#item2&quot;&gt;생성자의 매개변수가 많을 때는 builder를 고려하자&lt;/a&gt;&lt;br&gt;
규칙 3. &lt;a href=&quot;#item3&quot;&gt;private 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계하라&lt;/a&gt;&lt;br&gt;
규칙 4. &lt;a href=&quot;#item4&quot;&gt;객체 생성을 막을 때는 private 생성자를 사용하라&lt;/a&gt;&lt;br&gt;
규칙 5. &lt;a href=&quot;#item5&quot;&gt;불필요한 객체는 만들지 말라&lt;/a&gt;&lt;br&gt;
규칙 6. &lt;a href=&quot;#item6&quot;&gt;유효기간이 지난 객체 참조는 폐기하라&lt;/a&gt;&lt;br&gt;
규칙 7. &lt;a href=&quot;#item7&quot;&gt;종료자 사용을 피하라&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java, effective-java" scheme="https://wicksome.github.io/tags/java-effective-java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World(and MD Test)</title>
    <link href="https://wicksome.github.io/2017/04/24/hello-world/"/>
    <id>https://wicksome.github.io/2017/04/24/hello-world/</id>
    <published>2017-04-23T18:01:49.000Z</published>
    <updated>2017-04-24T02:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p>
<a id="more"></a>
<h2>Quick Start</h2>
<h3>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p>
<h3>Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p>
<h3>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p>
<h3>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>
<p><img src="https://octodex.github.com/images/minion.png" alt="Minion"></p>
<div id="flowchart-0" class="flow-chart"></div>
<div id="sequence-0"></div>
<div class="tip">
    预处理器很强大，但它只是编写 CSS 的辅助工具。出于对扩展和维护等方面的考虑，在大型项目中有必要使用预处理器构建 CSS；但是对于小型项目，原生的 CSS 可能是一种更好的选择。不要肆意使用预处理器！
</div>
<hr>
<p><strong>Advertisement</strong></p>
<ul>
<li><strong><a href="https://nodeca.github.io/pica/demo/" rel="external nofollow noopener noreferrer" target="_blank">pica</a></strong> - high quality and fast image
resize in browser.</li>
<li><strong><a href="https://github.com/nodeca/babelfish/" rel="external nofollow noopener noreferrer" target="_blank">babelfish</a></strong> - developer friendly
i18n with plurals support and easy syntax.</li>
</ul>
<p>You will like those projects!</p>
<hr>
<h1>h1 Heading</h1>
<h2>h2 Heading</h2>
<h3>h3 Heading</h3>
<h4>h4 Heading</h4>
<h5>h5 Heading</h5>
<h6>h6 Heading</h6>
<h2>Horizontal Rules</h2>
<hr>
<hr>
<hr>
<h2>Typographic replacements</h2>
<p>Enable typographer option to see result.</p>
<p>© © ® ® ™ ™ § § ±</p>
<p>test… test… test… test?.. test!..</p>
<p>!!! ??? ,  – —</p>
<p>“Smartypants, double quotes” and ‘single quotes’</p>
<h2>Emphasis</h2>
<p><strong>This is bold text</strong></p>
<p><strong>This is bold text</strong></p>
<p><em>This is italic text</em></p>
<p><em>This is italic text</em></p>
<p><sub></sub>Strikethrough<sub></sub></p>
<h2>Blockquotes</h2>
<blockquote>
<p>Blockquotes can also be nested…</p>
<blockquote>
<p>…by using additional greater-than signs right next to each other…</p>
<blockquote>
<p>…or with spaces between arrows.</p>
</blockquote>
</blockquote>
</blockquote>
<h2>Lists</h2>
<p>Unordered</p>
<ul>
<li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li>
<li>Sub-lists are made by indenting 2 spaces:
<ul>
<li>Marker character change forces new list start:
<ul>
<li>Ac tristique libero volutpat at</li>
</ul>
<ul>
<li>Facilisis in pretium nisl aliquet</li>
</ul>
<ul>
<li>Nulla volutpat aliquam velit</li>
</ul>
</li>
</ul>
</li>
<li>Very easy!</li>
</ul>
<p>Ordered</p>
<ol>
<li>Lorem ipsum dolor sit amet</li>
<li>Consectetur adipiscing elit</li>
<li>Integer molestie lorem at massa</li>
</ol>
<ol>
<li>You can use sequential numbers…</li>
<li>…or keep all the numbers as <code>1.</code></li>
</ol>
<p>Start numbering with offset:</p>
<ol start="57">
<li>foo</li>
<li>bar</li>
</ol>
<h2>Code</h2>
<p>Inline <code>code</code></p>
<p>Indented code</p>
<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>
<p>Block code “fences”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Sample text here...</div></pre></td></tr></table></figure>
<p>Syntax highlighting</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> bar++;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">5</span>));</div></pre></td></tr></table></figure>
<h2>Tables</h2>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>
<table>
<thead>
<tr>
<th style="text-align:right">Option</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h2>Links</h2>
<p><a href="http://dev.nodeca.com" rel="external nofollow noopener noreferrer" target="_blank">link text</a></p>
<p><a href="http://nodeca.github.io/pica/demo/" title="title text!" rel="external nofollow noopener noreferrer" target="_blank">link with title</a></p>
<p>Autoconverted link <a href="https://github.com/nodeca/pica" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/nodeca/pica</a> (enable linkify to see)</p>
<h2>Images</h2>
<p><img src="https://octodex.github.com/images/minion.png" alt="Minion">
<img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"></p>
<p>Like links, Images also have a footnote style syntax</p>
<p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"></p>
<p>With a reference later in the document defining the URL location:</p>
<h2>Plugins</h2>
<p>The killer feature of <code>markdown-it</code> is very effective support of
<a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin" rel="external nofollow noopener noreferrer" target="_blank">syntax plugins</a>.</p>
<p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output" rel="external nofollow noopener noreferrer" target="_blank">how to change output</a> with twemoji.</p>
<h3><a href="https://github.com/markdown-it/markdown-it-sub" rel="external nofollow noopener noreferrer" target="_blank">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup" rel="external nofollow noopener noreferrer" target="_blank">Superscript</a></h3>
<ul>
<li>19<sup>th</sup></li>
<li>H<sub>2</sub>O</li>
</ul>
<h3><a href="https://github.com/markdown-it/markdown-it-ins" rel="external nofollow noopener noreferrer" target="_blank">&lt;ins&gt;</a></h3>
<p><ins>Inserted text</ins></p>
<h3><a href="https://github.com/markdown-it/markdown-it-footnote" rel="external nofollow noopener noreferrer" target="_blank">Footnotes</a></h3>
<p>Footnote 1 link<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="basic footnote content
">[1]</span></a></sup>.</p>
<p>Footnote 2 link<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="paragraph
">[3]</span></a></sup>.</p>
<p>Duplicated footnote reference<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="footnote content with some [markdown](https://en.wikipedia.org/wiki/Markdown)">[4]</span></a></sup>.</p>
<h3><a href="https://github.com/markdown-it/markdown-it-abbr" rel="external nofollow noopener noreferrer" target="_blank">Abbreviations</a></h3>
<p>This is <abbr title="Hyper Text Markup Language">HTML</abbr> abbreviation example.</p>
<p>It converts “<abbr title="Hyper Text Markup Language">HTML</abbr>”, but keep intact partial entries like “xxxHTMLyyy” and so on.</p>
<h3><a href="https://github.com/markdown-it/markdown-it-container" rel="external nofollow noopener noreferrer" target="_blank">Custom containers</a></h3>
<p>::: tip</p>
<p><em>here be dragons</em> test</p>
<p>:::</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">basic footnote content<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">paragraph<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">footnote content with some <a href="https://en.wikipedia.org/wiki/Markdown" rel="external nofollow noopener noreferrer" target="_blank">markdown</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?
Note right of Bob: Bob thinks
Bob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(document.getElementById("sequence-0-options").value);  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]
e=>end: End:>http://www.google.com
op1=>operation: My Operation|past
op2=>operation: Stuff|current
sub1=>subroutine: My Subroutine|invalid
cond=>condition: Yes
or No?|approved:>http://www.google.com
c2=>condition: Good idea|rejected
io=>inputoutput: catch something...|request

st->op1(right)->cond
cond(yes, right)->c2
cond(no)->sub1(left)->op1
c2(yes)->io->e
c2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12,"theme":"simple"}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(document.getElementById("flowchart-0-options").value);  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://wicksome.github.io/categories/test/"/>
    
    
      <category term="markdown-test" scheme="https://wicksome.github.io/tags/markdown-test/"/>
    
  </entry>
  
</feed>
